<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Mica.proto
//   Date: 2016-04-06 14:15:43

namespace obiba\mica {

  class OpalCredentialType extends \DrSlump\Protobuf\Enum {
    const USERNAME = 0;
    const PUBLIC_KEY_CERTIFICATE = 1;
  }
}
namespace obiba\mica {

  class KeyType extends \DrSlump\Protobuf\Enum {
    const KEY_PAIR = 0;
    const CERTIFICATE = 1;
  }
}
namespace obiba\mica {

  class FileType extends \DrSlump\Protobuf\Enum {
    const FILE = 0;
    const FOLDER = 1;
  }
}
namespace obiba\mica {

  class SessionDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $username = null;
    
    /**  @var string[]  */
    public $roles = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.SessionDto');

      // REQUIRED STRING username = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING roles = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "roles";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(1);
    }
    
    /**
     * Clear <username> value
     *
     * @return \obiba\mica\SessionDto
     */
    public function clearUsername(){
      return $this->_clear(1);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(1);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \obiba\mica\SessionDto
     */
    public function setUsername( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <roles> has a value
     *
     * @return boolean
     */
    public function hasRoles(){
      return $this->_has(2);
    }
    
    /**
     * Clear <roles> value
     *
     * @return \obiba\mica\SessionDto
     */
    public function clearRoles(){
      return $this->_clear(2);
    }
    
    /**
     * Get <roles> value
     *
     * @param int $idx
     * @return string
     */
    public function getRoles($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <roles> value
     *
     * @param string $value
     * @return \obiba\mica\SessionDto
     */
    public function setRoles( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <roles>
     *
     * @return string[]
     */
    public function getRolesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <roles>
     *
     * @param string $value
     * @return \obiba\mica\SessionDto
     */
    public function addRoles( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class PermissionsDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $add = null;
    
    /**  @var boolean */
    public $view = null;
    
    /**  @var boolean */
    public $edit = null;
    
    /**  @var boolean */
    public $delete = null;
    
    /**  @var boolean */
    public $publish = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.PermissionsDto');

      // OPTIONAL BOOL add = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "add";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL view = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "view";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL edit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "edit";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL delete = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "delete";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL publish = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "publish";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <add> has a value
     *
     * @return boolean
     */
    public function hasAdd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <add> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function clearAdd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <add> value
     *
     * @return boolean
     */
    public function getAdd(){
      return $this->_get(1);
    }
    
    /**
     * Set <add> value
     *
     * @param boolean $value
     * @return \obiba\mica\PermissionsDto
     */
    public function setAdd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <view> has a value
     *
     * @return boolean
     */
    public function hasView(){
      return $this->_has(2);
    }
    
    /**
     * Clear <view> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function clearView(){
      return $this->_clear(2);
    }
    
    /**
     * Get <view> value
     *
     * @return boolean
     */
    public function getView(){
      return $this->_get(2);
    }
    
    /**
     * Set <view> value
     *
     * @param boolean $value
     * @return \obiba\mica\PermissionsDto
     */
    public function setView( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <edit> has a value
     *
     * @return boolean
     */
    public function hasEdit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <edit> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function clearEdit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <edit> value
     *
     * @return boolean
     */
    public function getEdit(){
      return $this->_get(3);
    }
    
    /**
     * Set <edit> value
     *
     * @param boolean $value
     * @return \obiba\mica\PermissionsDto
     */
    public function setEdit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <delete> has a value
     *
     * @return boolean
     */
    public function hasDelete(){
      return $this->_has(4);
    }
    
    /**
     * Clear <delete> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function clearDelete(){
      return $this->_clear(4);
    }
    
    /**
     * Get <delete> value
     *
     * @return boolean
     */
    public function getDelete(){
      return $this->_get(4);
    }
    
    /**
     * Set <delete> value
     *
     * @param boolean $value
     * @return \obiba\mica\PermissionsDto
     */
    public function setDelete( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <publish> has a value
     *
     * @return boolean
     */
    public function hasPublish(){
      return $this->_has(5);
    }
    
    /**
     * Clear <publish> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function clearPublish(){
      return $this->_clear(5);
    }
    
    /**
     * Get <publish> value
     *
     * @return boolean
     */
    public function getPublish(){
      return $this->_get(5);
    }
    
    /**
     * Set <publish> value
     *
     * @param boolean $value
     * @return \obiba\mica\PermissionsDto
     */
    public function setPublish( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace obiba\mica {

  class StudySummaryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $acronym = array();
    
    /**  @var string[]  */
    public $designs = array();
    
    /**  @var \obiba\mica\TargetNumberDto */
    public $targetNumber = null;
    
    /**  @var string[]  */
    public $countries = array();
    
    /**  @var \obiba\mica\AttachmentDto */
    public $logo = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $objectives = array();
    
    /**  @var string[]  */
    public $dataSources = array();
    
    /**  @var \obiba\mica\PopulationSummaryDto[]  */
    public $populationSummaries = array();
    
    /**  @var boolean */
    public $published = null;
    
    /**  @var int */
    public $variables = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudySummaryDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE acronym = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "acronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING designs = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "designs";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE targetNumber = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "targetNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TargetNumberDto';
      $descriptor->addField($f);

      // REPEATED STRING countries = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "countries";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE logo = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "logo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE objectives = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "objectives";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING dataSources = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "dataSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE populationSummaries = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "populationSummaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PopulationSummaryDto';
      $descriptor->addField($f);

      // REQUIRED BOOL published = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "published";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT64 variables = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "variables";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearTimestamps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <acronym> has a value
     *
     * @return boolean
     */
    public function hasAcronym(){
      return $this->_has(4);
    }
    
    /**
     * Clear <acronym> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearAcronym(){
      return $this->_clear(4);
    }
    
    /**
     * Get <acronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getAcronym($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <acronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <acronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getAcronymList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <acronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <designs> has a value
     *
     * @return boolean
     */
    public function hasDesigns(){
      return $this->_has(5);
    }
    
    /**
     * Clear <designs> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearDesigns(){
      return $this->_clear(5);
    }
    
    /**
     * Get <designs> value
     *
     * @param int $idx
     * @return string
     */
    public function getDesigns($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <designs> value
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setDesigns( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <designs>
     *
     * @return string[]
     */
    public function getDesignsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <designs>
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addDesigns( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <targetNumber> has a value
     *
     * @return boolean
     */
    public function hasTargetNumber(){
      return $this->_has(6);
    }
    
    /**
     * Clear <targetNumber> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearTargetNumber(){
      return $this->_clear(6);
    }
    
    /**
     * Get <targetNumber> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function getTargetNumber(){
      return $this->_get(6);
    }
    
    /**
     * Set <targetNumber> value
     *
     * @param \obiba\mica\TargetNumberDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setTargetNumber(\obiba\mica\TargetNumberDto $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <countries> has a value
     *
     * @return boolean
     */
    public function hasCountries(){
      return $this->_has(7);
    }
    
    /**
     * Clear <countries> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearCountries(){
      return $this->_clear(7);
    }
    
    /**
     * Get <countries> value
     *
     * @param int $idx
     * @return string
     */
    public function getCountries($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <countries> value
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setCountries( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <countries>
     *
     * @return string[]
     */
    public function getCountriesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <countries>
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addCountries( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <logo> has a value
     *
     * @return boolean
     */
    public function hasLogo(){
      return $this->_has(8);
    }
    
    /**
     * Clear <logo> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearLogo(){
      return $this->_clear(8);
    }
    
    /**
     * Get <logo> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function getLogo(){
      return $this->_get(8);
    }
    
    /**
     * Set <logo> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setLogo(\obiba\mica\AttachmentDto $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <objectives> has a value
     *
     * @return boolean
     */
    public function hasObjectives(){
      return $this->_has(9);
    }
    
    /**
     * Clear <objectives> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearObjectives(){
      return $this->_clear(9);
    }
    
    /**
     * Get <objectives> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getObjectives($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <objectives> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setObjectives(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <objectives>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getObjectivesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <objectives>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addObjectives(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <dataSources> has a value
     *
     * @return boolean
     */
    public function hasDataSources(){
      return $this->_has(10);
    }
    
    /**
     * Clear <dataSources> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearDataSources(){
      return $this->_clear(10);
    }
    
    /**
     * Get <dataSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getDataSources($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <dataSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setDataSources( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <dataSources>
     *
     * @return string[]
     */
    public function getDataSourcesList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <dataSources>
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addDataSources( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <populationSummaries> has a value
     *
     * @return boolean
     */
    public function hasPopulationSummaries(){
      return $this->_has(11);
    }
    
    /**
     * Clear <populationSummaries> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearPopulationSummaries(){
      return $this->_clear(11);
    }
    
    /**
     * Get <populationSummaries> value
     *
     * @param int $idx
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function getPopulationSummaries($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <populationSummaries> value
     *
     * @param \obiba\mica\PopulationSummaryDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setPopulationSummaries(\obiba\mica\PopulationSummaryDto $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <populationSummaries>
     *
     * @return \obiba\mica\PopulationSummaryDto[]
     */
    public function getPopulationSummariesList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <populationSummaries>
     *
     * @param \obiba\mica\PopulationSummaryDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addPopulationSummaries(\obiba\mica\PopulationSummaryDto $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <published> has a value
     *
     * @return boolean
     */
    public function hasPublished(){
      return $this->_has(12);
    }
    
    /**
     * Clear <published> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearPublished(){
      return $this->_clear(12);
    }
    
    /**
     * Get <published> value
     *
     * @return boolean
     */
    public function getPublished(){
      return $this->_get(12);
    }
    
    /**
     * Set <published> value
     *
     * @param boolean $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setPublished( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables(){
      return $this->_has(13);
    }
    
    /**
     * Clear <variables> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearVariables(){
      return $this->_clear(13);
    }
    
    /**
     * Get <variables> value
     *
     * @return int
     */
    public function getVariables(){
      return $this->_get(13);
    }
    
    /**
     * Set <variables> value
     *
     * @param int $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setVariables( $value){
      return $this->_set(13, $value);
    }
  }
}

namespace obiba\mica {

  class PopulationSummaryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\DataCollectionEventSummaryDto[]  */
    public $dataCollectionEventSummaries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.PopulationSummaryDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE dataCollectionEventSummaries = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "dataCollectionEventSummaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DataCollectionEventSummaryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <dataCollectionEventSummaries> has a value
     *
     * @return boolean
     */
    public function hasDataCollectionEventSummaries(){
      return $this->_has(3);
    }
    
    /**
     * Clear <dataCollectionEventSummaries> value
     *
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function clearDataCollectionEventSummaries(){
      return $this->_clear(3);
    }
    
    /**
     * Get <dataCollectionEventSummaries> value
     *
     * @param int $idx
     * @return \obiba\mica\DataCollectionEventSummaryDto
     */
    public function getDataCollectionEventSummaries($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <dataCollectionEventSummaries> value
     *
     * @param \obiba\mica\DataCollectionEventSummaryDto $value
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function setDataCollectionEventSummaries(\obiba\mica\DataCollectionEventSummaryDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <dataCollectionEventSummaries>
     *
     * @return \obiba\mica\DataCollectionEventSummaryDto[]
     */
    public function getDataCollectionEventSummariesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <dataCollectionEventSummaries>
     *
     * @param \obiba\mica\DataCollectionEventSummaryDto $value
     * @return \obiba\mica\PopulationSummaryDto
     */
    public function addDataCollectionEventSummaries(\obiba\mica\DataCollectionEventSummaryDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class DataCollectionEventSummaryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DataCollectionEventSummaryDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\DataCollectionEventSummaryDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\DataCollectionEventSummaryDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\DataCollectionEventSummaryDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DataCollectionEventSummaryDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DataCollectionEventSummaryDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class StudySummariesDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $from = null;
    
    /**  @var int */
    public $limit = null;
    
    /**  @var \obiba\mica\StudySummaryDto[]  */
    public $studySummaries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudySummariesDto');

      // REQUIRED INT32 total = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 from = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 limit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE studySummaries = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "studySummaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudySummaryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <total> value
     *
     * @return \obiba\mica\StudySummariesDto
     */
    public function clearTotal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(1);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \obiba\mica\StudySummariesDto
     */
    public function setTotal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(2);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\StudySummariesDto
     */
    public function clearFrom(){
      return $this->_clear(2);
    }
    
    /**
     * Get <from> value
     *
     * @return int
     */
    public function getFrom(){
      return $this->_get(2);
    }
    
    /**
     * Set <from> value
     *
     * @param int $value
     * @return \obiba\mica\StudySummariesDto
     */
    public function setFrom( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <limit> value
     *
     * @return \obiba\mica\StudySummariesDto
     */
    public function clearLimit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(3);
    }
    
    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \obiba\mica\StudySummariesDto
     */
    public function setLimit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <studySummaries> has a value
     *
     * @return boolean
     */
    public function hasStudySummaries(){
      return $this->_has(4);
    }
    
    /**
     * Clear <studySummaries> value
     *
     * @return \obiba\mica\StudySummariesDto
     */
    public function clearStudySummaries(){
      return $this->_clear(4);
    }
    
    /**
     * Get <studySummaries> value
     *
     * @param int $idx
     * @return \obiba\mica\StudySummaryDto
     */
    public function getStudySummaries($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <studySummaries> value
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudySummariesDto
     */
    public function setStudySummaries(\obiba\mica\StudySummaryDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <studySummaries>
     *
     * @return \obiba\mica\StudySummaryDto[]
     */
    public function getStudySummariesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <studySummaries>
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudySummariesDto
     */
    public function addStudySummaries(\obiba\mica\StudySummaryDto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace obiba\mica {

  class EntityStateDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $publishedTag = null;
    
    /**  @var int */
    public $revisionsAhead = null;
    
    /**  @var string */
    public $revisionStatus = null;
    
    /**  @var string */
    public $publicationDate = null;
    
    /**  @var string */
    public $publishedBy = null;
    
    /**  @var string */
    public $publishedId = null;
    
    /**  @var \obiba\mica\PermissionsDto */
    public $permissions = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.EntityStateDto');

      // OPTIONAL STRING publishedTag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "publishedTag";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 revisionsAhead = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "revisionsAhead";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING revisionStatus = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "revisionStatus";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING publicationDate = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "publicationDate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING publishedBy = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "publishedBy";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING publishedId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "publishedId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE permissions = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "permissions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\PermissionsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <publishedTag> has a value
     *
     * @return boolean
     */
    public function hasPublishedTag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <publishedTag> value
     *
     * @return \obiba\mica\EntityStateDto
     */
    public function clearPublishedTag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <publishedTag> value
     *
     * @return string
     */
    public function getPublishedTag(){
      return $this->_get(1);
    }
    
    /**
     * Set <publishedTag> value
     *
     * @param string $value
     * @return \obiba\mica\EntityStateDto
     */
    public function setPublishedTag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <revisionsAhead> has a value
     *
     * @return boolean
     */
    public function hasRevisionsAhead(){
      return $this->_has(2);
    }
    
    /**
     * Clear <revisionsAhead> value
     *
     * @return \obiba\mica\EntityStateDto
     */
    public function clearRevisionsAhead(){
      return $this->_clear(2);
    }
    
    /**
     * Get <revisionsAhead> value
     *
     * @return int
     */
    public function getRevisionsAhead(){
      return $this->_get(2);
    }
    
    /**
     * Set <revisionsAhead> value
     *
     * @param int $value
     * @return \obiba\mica\EntityStateDto
     */
    public function setRevisionsAhead( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <revisionStatus> has a value
     *
     * @return boolean
     */
    public function hasRevisionStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <revisionStatus> value
     *
     * @return \obiba\mica\EntityStateDto
     */
    public function clearRevisionStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <revisionStatus> value
     *
     * @return string
     */
    public function getRevisionStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <revisionStatus> value
     *
     * @param string $value
     * @return \obiba\mica\EntityStateDto
     */
    public function setRevisionStatus( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <publicationDate> has a value
     *
     * @return boolean
     */
    public function hasPublicationDate(){
      return $this->_has(4);
    }
    
    /**
     * Clear <publicationDate> value
     *
     * @return \obiba\mica\EntityStateDto
     */
    public function clearPublicationDate(){
      return $this->_clear(4);
    }
    
    /**
     * Get <publicationDate> value
     *
     * @return string
     */
    public function getPublicationDate(){
      return $this->_get(4);
    }
    
    /**
     * Set <publicationDate> value
     *
     * @param string $value
     * @return \obiba\mica\EntityStateDto
     */
    public function setPublicationDate( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <publishedBy> has a value
     *
     * @return boolean
     */
    public function hasPublishedBy(){
      return $this->_has(5);
    }
    
    /**
     * Clear <publishedBy> value
     *
     * @return \obiba\mica\EntityStateDto
     */
    public function clearPublishedBy(){
      return $this->_clear(5);
    }
    
    /**
     * Get <publishedBy> value
     *
     * @return string
     */
    public function getPublishedBy(){
      return $this->_get(5);
    }
    
    /**
     * Set <publishedBy> value
     *
     * @param string $value
     * @return \obiba\mica\EntityStateDto
     */
    public function setPublishedBy( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <publishedId> has a value
     *
     * @return boolean
     */
    public function hasPublishedId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <publishedId> value
     *
     * @return \obiba\mica\EntityStateDto
     */
    public function clearPublishedId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <publishedId> value
     *
     * @return string
     */
    public function getPublishedId(){
      return $this->_get(6);
    }
    
    /**
     * Set <publishedId> value
     *
     * @param string $value
     * @return \obiba\mica\EntityStateDto
     */
    public function setPublishedId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <permissions> has a value
     *
     * @return boolean
     */
    public function hasPermissions(){
      return $this->_has(7);
    }
    
    /**
     * Clear <permissions> value
     *
     * @return \obiba\mica\EntityStateDto
     */
    public function clearPermissions(){
      return $this->_clear(7);
    }
    
    /**
     * Get <permissions> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function getPermissions(){
      return $this->_get(7);
    }
    
    /**
     * Set <permissions> value
     *
     * @param \obiba\mica\PermissionsDto $value
     * @return \obiba\mica\EntityStateDto
     */
    public function setPermissions(\obiba\mica\PermissionsDto $value){
      return $this->_set(7, $value);
    }
  }
}

namespace obiba\mica {

  class StudyStateDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $publishedTag = null;
    
    /**  @var int */
    public $revisionsAhead = null;
    
    /**  @var string */
    public $revisionStatus = null;
    
    /**  @var string */
    public $publicationDate = null;
    
    /**  @var string */
    public $publishedBy = null;
    
    /**  @var string */
    public $publishedId = null;
    
    /**  @var \obiba\mica\PermissionsDto */
    public $permissions = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyStateDto');

      // OPTIONAL STRING publishedTag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "publishedTag";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 revisionsAhead = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "revisionsAhead";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING revisionStatus = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "revisionStatus";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING publicationDate = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "publicationDate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING publishedBy = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "publishedBy";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING publishedId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "publishedId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE permissions = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "permissions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\PermissionsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <publishedTag> has a value
     *
     * @return boolean
     */
    public function hasPublishedTag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <publishedTag> value
     *
     * @return \obiba\mica\StudyStateDto
     */
    public function clearPublishedTag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <publishedTag> value
     *
     * @return string
     */
    public function getPublishedTag(){
      return $this->_get(1);
    }
    
    /**
     * Set <publishedTag> value
     *
     * @param string $value
     * @return \obiba\mica\StudyStateDto
     */
    public function setPublishedTag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <revisionsAhead> has a value
     *
     * @return boolean
     */
    public function hasRevisionsAhead(){
      return $this->_has(2);
    }
    
    /**
     * Clear <revisionsAhead> value
     *
     * @return \obiba\mica\StudyStateDto
     */
    public function clearRevisionsAhead(){
      return $this->_clear(2);
    }
    
    /**
     * Get <revisionsAhead> value
     *
     * @return int
     */
    public function getRevisionsAhead(){
      return $this->_get(2);
    }
    
    /**
     * Set <revisionsAhead> value
     *
     * @param int $value
     * @return \obiba\mica\StudyStateDto
     */
    public function setRevisionsAhead( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <revisionStatus> has a value
     *
     * @return boolean
     */
    public function hasRevisionStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <revisionStatus> value
     *
     * @return \obiba\mica\StudyStateDto
     */
    public function clearRevisionStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <revisionStatus> value
     *
     * @return string
     */
    public function getRevisionStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <revisionStatus> value
     *
     * @param string $value
     * @return \obiba\mica\StudyStateDto
     */
    public function setRevisionStatus( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <publicationDate> has a value
     *
     * @return boolean
     */
    public function hasPublicationDate(){
      return $this->_has(4);
    }
    
    /**
     * Clear <publicationDate> value
     *
     * @return \obiba\mica\StudyStateDto
     */
    public function clearPublicationDate(){
      return $this->_clear(4);
    }
    
    /**
     * Get <publicationDate> value
     *
     * @return string
     */
    public function getPublicationDate(){
      return $this->_get(4);
    }
    
    /**
     * Set <publicationDate> value
     *
     * @param string $value
     * @return \obiba\mica\StudyStateDto
     */
    public function setPublicationDate( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <publishedBy> has a value
     *
     * @return boolean
     */
    public function hasPublishedBy(){
      return $this->_has(5);
    }
    
    /**
     * Clear <publishedBy> value
     *
     * @return \obiba\mica\StudyStateDto
     */
    public function clearPublishedBy(){
      return $this->_clear(5);
    }
    
    /**
     * Get <publishedBy> value
     *
     * @return string
     */
    public function getPublishedBy(){
      return $this->_get(5);
    }
    
    /**
     * Set <publishedBy> value
     *
     * @param string $value
     * @return \obiba\mica\StudyStateDto
     */
    public function setPublishedBy( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <publishedId> has a value
     *
     * @return boolean
     */
    public function hasPublishedId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <publishedId> value
     *
     * @return \obiba\mica\StudyStateDto
     */
    public function clearPublishedId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <publishedId> value
     *
     * @return string
     */
    public function getPublishedId(){
      return $this->_get(6);
    }
    
    /**
     * Set <publishedId> value
     *
     * @param string $value
     * @return \obiba\mica\StudyStateDto
     */
    public function setPublishedId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <permissions> has a value
     *
     * @return boolean
     */
    public function hasPermissions(){
      return $this->_has(7);
    }
    
    /**
     * Clear <permissions> value
     *
     * @return \obiba\mica\StudyStateDto
     */
    public function clearPermissions(){
      return $this->_clear(7);
    }
    
    /**
     * Get <permissions> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function getPermissions(){
      return $this->_get(7);
    }
    
    /**
     * Set <permissions> value
     *
     * @param \obiba\mica\PermissionsDto $value
     * @return \obiba\mica\StudyStateDto
     */
    public function setPermissions(\obiba\mica\PermissionsDto $value){
      return $this->_set(7, $value);
    }
  }
}

namespace obiba\mica\StudyDto {

  class StudyMethodsDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $designs = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherDesign = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $followUpInfo = array();
    
    /**  @var string[]  */
    public $recruitments = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherRecruitment = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.StudyMethodsDto');

      // REPEATED STRING designs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "designs";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherDesign = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "otherDesign";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE followUpInfo = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "followUpInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING recruitments = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "recruitments";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherRecruitment = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "otherRecruitment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <designs> has a value
     *
     * @return boolean
     */
    public function hasDesigns(){
      return $this->_has(1);
    }
    
    /**
     * Clear <designs> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearDesigns(){
      return $this->_clear(1);
    }
    
    /**
     * Get <designs> value
     *
     * @param int $idx
     * @return string
     */
    public function getDesigns($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <designs> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setDesigns( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <designs>
     *
     * @return string[]
     */
    public function getDesignsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <designs>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addDesigns( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <otherDesign> has a value
     *
     * @return boolean
     */
    public function hasOtherDesign(){
      return $this->_has(2);
    }
    
    /**
     * Clear <otherDesign> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearOtherDesign(){
      return $this->_clear(2);
    }
    
    /**
     * Get <otherDesign> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherDesign($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <otherDesign> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setOtherDesign(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <otherDesign>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherDesignList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <otherDesign>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addOtherDesign(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <followUpInfo> has a value
     *
     * @return boolean
     */
    public function hasFollowUpInfo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <followUpInfo> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearFollowUpInfo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <followUpInfo> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getFollowUpInfo($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <followUpInfo> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setFollowUpInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <followUpInfo>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getFollowUpInfoList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <followUpInfo>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addFollowUpInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <recruitments> has a value
     *
     * @return boolean
     */
    public function hasRecruitments(){
      return $this->_has(4);
    }
    
    /**
     * Clear <recruitments> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearRecruitments(){
      return $this->_clear(4);
    }
    
    /**
     * Get <recruitments> value
     *
     * @param int $idx
     * @return string
     */
    public function getRecruitments($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <recruitments> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setRecruitments( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <recruitments>
     *
     * @return string[]
     */
    public function getRecruitmentsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <recruitments>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addRecruitments( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <otherRecruitment> has a value
     *
     * @return boolean
     */
    public function hasOtherRecruitment(){
      return $this->_has(5);
    }
    
    /**
     * Clear <otherRecruitment> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearOtherRecruitment(){
      return $this->_clear(5);
    }
    
    /**
     * Get <otherRecruitment> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherRecruitment($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <otherRecruitment> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setOtherRecruitment(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <otherRecruitment>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherRecruitmentList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <otherRecruitment>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addOtherRecruitment(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearInfo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(6, $value);
    }
  }
}

namespace obiba\mica\StudyDto {

  class NumberOfParticipantsDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\TargetNumberDto */
    public $participant = null;
    
    /**  @var \obiba\mica\TargetNumberDto */
    public $sample = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.NumberOfParticipantsDto');

      // OPTIONAL MESSAGE participant = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "participant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TargetNumberDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sample = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sample";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TargetNumberDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <participant> has a value
     *
     * @return boolean
     */
    public function hasParticipant(){
      return $this->_has(1);
    }
    
    /**
     * Clear <participant> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function clearParticipant(){
      return $this->_clear(1);
    }
    
    /**
     * Get <participant> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function getParticipant(){
      return $this->_get(1);
    }
    
    /**
     * Set <participant> value
     *
     * @param \obiba\mica\TargetNumberDto $value
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function setParticipant(\obiba\mica\TargetNumberDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sample> has a value
     *
     * @return boolean
     */
    public function hasSample(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sample> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function clearSample(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sample> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function getSample(){
      return $this->_get(2);
    }
    
    /**
     * Set <sample> value
     *
     * @param \obiba\mica\TargetNumberDto $value
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function setSample(\obiba\mica\TargetNumberDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function clearInfo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica\StudyDto\PopulationDto {

  class RecruitmentDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $dataSources = array();
    
    /**  @var string[]  */
    public $generalPopulationSources = array();
    
    /**  @var string[]  */
    public $specificPopulationSources = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherSpecificPopulationSource = array();
    
    /**  @var \obiba\mica\LocalizedStringDtos[]  */
    public $studies = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherSource = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.PopulationDto.RecruitmentDto');

      // REPEATED STRING dataSources = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dataSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING generalPopulationSources = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "generalPopulationSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING specificPopulationSources = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "specificPopulationSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherSpecificPopulationSource = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "otherSpecificPopulationSource";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE studies = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "studies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDtos';
      $descriptor->addField($f);

      // REPEATED MESSAGE otherSource = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "otherSource";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dataSources> has a value
     *
     * @return boolean
     */
    public function hasDataSources(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dataSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearDataSources(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dataSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getDataSources($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <dataSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setDataSources( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <dataSources>
     *
     * @return string[]
     */
    public function getDataSourcesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <dataSources>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addDataSources( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <generalPopulationSources> has a value
     *
     * @return boolean
     */
    public function hasGeneralPopulationSources(){
      return $this->_has(2);
    }
    
    /**
     * Clear <generalPopulationSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearGeneralPopulationSources(){
      return $this->_clear(2);
    }
    
    /**
     * Get <generalPopulationSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getGeneralPopulationSources($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <generalPopulationSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setGeneralPopulationSources( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <generalPopulationSources>
     *
     * @return string[]
     */
    public function getGeneralPopulationSourcesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <generalPopulationSources>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addGeneralPopulationSources( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <specificPopulationSources> has a value
     *
     * @return boolean
     */
    public function hasSpecificPopulationSources(){
      return $this->_has(3);
    }
    
    /**
     * Clear <specificPopulationSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearSpecificPopulationSources(){
      return $this->_clear(3);
    }
    
    /**
     * Get <specificPopulationSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getSpecificPopulationSources($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <specificPopulationSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setSpecificPopulationSources( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <specificPopulationSources>
     *
     * @return string[]
     */
    public function getSpecificPopulationSourcesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <specificPopulationSources>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addSpecificPopulationSources( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <otherSpecificPopulationSource> has a value
     *
     * @return boolean
     */
    public function hasOtherSpecificPopulationSource(){
      return $this->_has(4);
    }
    
    /**
     * Clear <otherSpecificPopulationSource> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearOtherSpecificPopulationSource(){
      return $this->_clear(4);
    }
    
    /**
     * Get <otherSpecificPopulationSource> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherSpecificPopulationSource($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <otherSpecificPopulationSource> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setOtherSpecificPopulationSource(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <otherSpecificPopulationSource>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherSpecificPopulationSourceList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <otherSpecificPopulationSource>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addOtherSpecificPopulationSource(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <studies> has a value
     *
     * @return boolean
     */
    public function hasStudies(){
      return $this->_has(5);
    }
    
    /**
     * Clear <studies> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearStudies(){
      return $this->_clear(5);
    }
    
    /**
     * Get <studies> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function getStudies($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <studies> value
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setStudies(\obiba\mica\LocalizedStringDtos $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <studies>
     *
     * @return \obiba\mica\LocalizedStringDtos[]
     */
    public function getStudiesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <studies>
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addStudies(\obiba\mica\LocalizedStringDtos $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <otherSource> has a value
     *
     * @return boolean
     */
    public function hasOtherSource(){
      return $this->_has(6);
    }
    
    /**
     * Clear <otherSource> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearOtherSource(){
      return $this->_clear(6);
    }
    
    /**
     * Get <otherSource> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherSource($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <otherSource> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setOtherSource(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <otherSource>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherSourceList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <otherSource>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addOtherSource(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(7);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearInfo(){
      return $this->_clear(7);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(7, $value);
    }
  }
}

namespace obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto {

  class Gender extends \DrSlump\Protobuf\Enum {
    const men = 0;
    const women = 1;
  }
}
namespace obiba\mica\StudyDto\PopulationDto {

  class SelectionCriteriaDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto\Gender */
    public $gender = null;
    
    /**  @var float */
    public $ageMin = null;
    
    /**  @var float */
    public $ageMax = null;
    
    /**  @var string[]  */
    public $countriesIso = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $territory = array();
    
    /**  @var string[]  */
    public $criteria = array();
    
    /**  @var \obiba\mica\LocalizedStringDtos[]  */
    public $ethnicOrigin = array();
    
    /**  @var \obiba\mica\LocalizedStringDtos[]  */
    public $healthStatus = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherCriteria = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.PopulationDto.SelectionCriteriaDto');

      // OPTIONAL ENUM gender = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto\Gender';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE ageMin = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ageMin";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE ageMax = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ageMax";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING countriesIso = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "countriesIso";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE territory = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "territory";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING criteria = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "criteria";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE ethnicOrigin = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "ethnicOrigin";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDtos';
      $descriptor->addField($f);

      // REPEATED MESSAGE healthStatus = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "healthStatus";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDtos';
      $descriptor->addField($f);

      // REPEATED MESSAGE otherCriteria = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "otherCriteria";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(1);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearGender(){
      return $this->_clear(1);
    }
    
    /**
     * Get <gender> value
     *
     * @return int - \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto\Gender
     */
    public function getGender(){
      return $this->_get(1);
    }
    
    /**
     * Set <gender> value
     *
     * @param int - \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto\Gender $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setGender( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ageMin> has a value
     *
     * @return boolean
     */
    public function hasAgeMin(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ageMin> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearAgeMin(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ageMin> value
     *
     * @return float
     */
    public function getAgeMin(){
      return $this->_get(2);
    }
    
    /**
     * Set <ageMin> value
     *
     * @param float $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setAgeMin( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ageMax> has a value
     *
     * @return boolean
     */
    public function hasAgeMax(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ageMax> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearAgeMax(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ageMax> value
     *
     * @return float
     */
    public function getAgeMax(){
      return $this->_get(3);
    }
    
    /**
     * Set <ageMax> value
     *
     * @param float $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setAgeMax( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <countriesIso> has a value
     *
     * @return boolean
     */
    public function hasCountriesIso(){
      return $this->_has(4);
    }
    
    /**
     * Clear <countriesIso> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearCountriesIso(){
      return $this->_clear(4);
    }
    
    /**
     * Get <countriesIso> value
     *
     * @param int $idx
     * @return string
     */
    public function getCountriesIso($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <countriesIso> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setCountriesIso( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <countriesIso>
     *
     * @return string[]
     */
    public function getCountriesIsoList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <countriesIso>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addCountriesIso( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <territory> has a value
     *
     * @return boolean
     */
    public function hasTerritory(){
      return $this->_has(5);
    }
    
    /**
     * Clear <territory> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearTerritory(){
      return $this->_clear(5);
    }
    
    /**
     * Get <territory> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getTerritory($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <territory> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setTerritory(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <territory>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getTerritoryList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <territory>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addTerritory(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <criteria> has a value
     *
     * @return boolean
     */
    public function hasCriteria(){
      return $this->_has(6);
    }
    
    /**
     * Clear <criteria> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearCriteria(){
      return $this->_clear(6);
    }
    
    /**
     * Get <criteria> value
     *
     * @param int $idx
     * @return string
     */
    public function getCriteria($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <criteria> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setCriteria( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <criteria>
     *
     * @return string[]
     */
    public function getCriteriaList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <criteria>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addCriteria( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <ethnicOrigin> has a value
     *
     * @return boolean
     */
    public function hasEthnicOrigin(){
      return $this->_has(7);
    }
    
    /**
     * Clear <ethnicOrigin> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearEthnicOrigin(){
      return $this->_clear(7);
    }
    
    /**
     * Get <ethnicOrigin> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function getEthnicOrigin($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <ethnicOrigin> value
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setEthnicOrigin(\obiba\mica\LocalizedStringDtos $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <ethnicOrigin>
     *
     * @return \obiba\mica\LocalizedStringDtos[]
     */
    public function getEthnicOriginList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <ethnicOrigin>
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addEthnicOrigin(\obiba\mica\LocalizedStringDtos $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <healthStatus> has a value
     *
     * @return boolean
     */
    public function hasHealthStatus(){
      return $this->_has(8);
    }
    
    /**
     * Clear <healthStatus> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearHealthStatus(){
      return $this->_clear(8);
    }
    
    /**
     * Get <healthStatus> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function getHealthStatus($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <healthStatus> value
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setHealthStatus(\obiba\mica\LocalizedStringDtos $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <healthStatus>
     *
     * @return \obiba\mica\LocalizedStringDtos[]
     */
    public function getHealthStatusList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <healthStatus>
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addHealthStatus(\obiba\mica\LocalizedStringDtos $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <otherCriteria> has a value
     *
     * @return boolean
     */
    public function hasOtherCriteria(){
      return $this->_has(9);
    }
    
    /**
     * Clear <otherCriteria> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearOtherCriteria(){
      return $this->_clear(9);
    }
    
    /**
     * Get <otherCriteria> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherCriteria($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <otherCriteria> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setOtherCriteria(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <otherCriteria>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherCriteriaList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <otherCriteria>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addOtherCriteria(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(10);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearInfo(){
      return $this->_clear(10);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(10, $value);
    }
  }
}

namespace obiba\mica\StudyDto\PopulationDto {

  class DataCollectionEventDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var int */
    public $startYear = null;
    
    /**  @var int */
    public $startMonth = null;
    
    /**  @var int */
    public $endYear = null;
    
    /**  @var int */
    public $endMonth = null;
    
    /**  @var string[]  */
    public $dataSources = array();
    
    /**  @var string[]  */
    public $administrativeDatabases = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherDataSources = array();
    
    /**  @var string[]  */
    public $bioSamples = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $tissueTypes = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherBioSamples = array();
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $attachments = array();
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.PopulationDto.DataCollectionEventDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REQUIRED INT32 startYear = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "startYear";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 startMonth = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "startMonth";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 endYear = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "endYear";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 endMonth = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "endMonth";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING dataSources = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "dataSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING administrativeDatabases = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "administrativeDatabases";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherDataSources = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "otherDataSources";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING bioSamples = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "bioSamples";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE tissueTypes = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "tissueTypes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE otherBioSamples = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "otherBioSamples";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attachments = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "attachments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <startYear> has a value
     *
     * @return boolean
     */
    public function hasStartYear(){
      return $this->_has(4);
    }
    
    /**
     * Clear <startYear> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearStartYear(){
      return $this->_clear(4);
    }
    
    /**
     * Get <startYear> value
     *
     * @return int
     */
    public function getStartYear(){
      return $this->_get(4);
    }
    
    /**
     * Set <startYear> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setStartYear( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <startMonth> has a value
     *
     * @return boolean
     */
    public function hasStartMonth(){
      return $this->_has(5);
    }
    
    /**
     * Clear <startMonth> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearStartMonth(){
      return $this->_clear(5);
    }
    
    /**
     * Get <startMonth> value
     *
     * @return int
     */
    public function getStartMonth(){
      return $this->_get(5);
    }
    
    /**
     * Set <startMonth> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setStartMonth( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <endYear> has a value
     *
     * @return boolean
     */
    public function hasEndYear(){
      return $this->_has(6);
    }
    
    /**
     * Clear <endYear> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearEndYear(){
      return $this->_clear(6);
    }
    
    /**
     * Get <endYear> value
     *
     * @return int
     */
    public function getEndYear(){
      return $this->_get(6);
    }
    
    /**
     * Set <endYear> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setEndYear( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <endMonth> has a value
     *
     * @return boolean
     */
    public function hasEndMonth(){
      return $this->_has(7);
    }
    
    /**
     * Clear <endMonth> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearEndMonth(){
      return $this->_clear(7);
    }
    
    /**
     * Get <endMonth> value
     *
     * @return int
     */
    public function getEndMonth(){
      return $this->_get(7);
    }
    
    /**
     * Set <endMonth> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setEndMonth( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <dataSources> has a value
     *
     * @return boolean
     */
    public function hasDataSources(){
      return $this->_has(8);
    }
    
    /**
     * Clear <dataSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearDataSources(){
      return $this->_clear(8);
    }
    
    /**
     * Get <dataSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getDataSources($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <dataSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setDataSources( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <dataSources>
     *
     * @return string[]
     */
    public function getDataSourcesList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <dataSources>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addDataSources( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <administrativeDatabases> has a value
     *
     * @return boolean
     */
    public function hasAdministrativeDatabases(){
      return $this->_has(9);
    }
    
    /**
     * Clear <administrativeDatabases> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearAdministrativeDatabases(){
      return $this->_clear(9);
    }
    
    /**
     * Get <administrativeDatabases> value
     *
     * @param int $idx
     * @return string
     */
    public function getAdministrativeDatabases($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <administrativeDatabases> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setAdministrativeDatabases( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <administrativeDatabases>
     *
     * @return string[]
     */
    public function getAdministrativeDatabasesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <administrativeDatabases>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addAdministrativeDatabases( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <otherDataSources> has a value
     *
     * @return boolean
     */
    public function hasOtherDataSources(){
      return $this->_has(10);
    }
    
    /**
     * Clear <otherDataSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearOtherDataSources(){
      return $this->_clear(10);
    }
    
    /**
     * Get <otherDataSources> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherDataSources($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <otherDataSources> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setOtherDataSources(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <otherDataSources>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherDataSourcesList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <otherDataSources>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addOtherDataSources(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <bioSamples> has a value
     *
     * @return boolean
     */
    public function hasBioSamples(){
      return $this->_has(11);
    }
    
    /**
     * Clear <bioSamples> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearBioSamples(){
      return $this->_clear(11);
    }
    
    /**
     * Get <bioSamples> value
     *
     * @param int $idx
     * @return string
     */
    public function getBioSamples($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <bioSamples> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setBioSamples( $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <bioSamples>
     *
     * @return string[]
     */
    public function getBioSamplesList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <bioSamples>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addBioSamples( $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <tissueTypes> has a value
     *
     * @return boolean
     */
    public function hasTissueTypes(){
      return $this->_has(12);
    }
    
    /**
     * Clear <tissueTypes> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearTissueTypes(){
      return $this->_clear(12);
    }
    
    /**
     * Get <tissueTypes> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getTissueTypes($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <tissueTypes> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setTissueTypes(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <tissueTypes>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getTissueTypesList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <tissueTypes>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addTissueTypes(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(12, $value);
    }
    
    /**
     * Check if <otherBioSamples> has a value
     *
     * @return boolean
     */
    public function hasOtherBioSamples(){
      return $this->_has(13);
    }
    
    /**
     * Clear <otherBioSamples> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearOtherBioSamples(){
      return $this->_clear(13);
    }
    
    /**
     * Get <otherBioSamples> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherBioSamples($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <otherBioSamples> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setOtherBioSamples(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <otherBioSamples>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherBioSamplesList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <otherBioSamples>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addOtherBioSamples(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <attachments> has a value
     *
     * @return boolean
     */
    public function hasAttachments(){
      return $this->_has(14);
    }
    
    /**
     * Clear <attachments> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearAttachments(){
      return $this->_clear(14);
    }
    
    /**
     * Get <attachments> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachments($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <attachments> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setAttachments(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <attachments>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getAttachmentsList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <attachments>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addAttachments(\obiba\mica\AttachmentDto $value){
     return $this->_add(14, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(15);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearAttributes(){
      return $this->_clear(15);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(15, $value);
    }
  }
}

namespace obiba\mica\StudyDto {

  class PopulationDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var \obiba\mica\StudyDto\PopulationDto\RecruitmentDto */
    public $recruitment = null;
    
    /**  @var \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto */
    public $selectionCriteria = null;
    
    /**  @var \obiba\mica\StudyDto\NumberOfParticipantsDto */
    public $numberOfParticipants = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    
    /**  @var \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto[]  */
    public $dataCollectionEvents = array();
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.PopulationDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE recruitment = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "recruitment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto\RecruitmentDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE selectionCriteria = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "selectionCriteria";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE numberOfParticipants = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "numberOfParticipants";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\NumberOfParticipantsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE dataCollectionEvents = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "dataCollectionEvents";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <recruitment> has a value
     *
     * @return boolean
     */
    public function hasRecruitment(){
      return $this->_has(4);
    }
    
    /**
     * Clear <recruitment> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearRecruitment(){
      return $this->_clear(4);
    }
    
    /**
     * Get <recruitment> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function getRecruitment(){
      return $this->_get(4);
    }
    
    /**
     * Set <recruitment> value
     *
     * @param \obiba\mica\StudyDto\PopulationDto\RecruitmentDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setRecruitment(\obiba\mica\StudyDto\PopulationDto\RecruitmentDto $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <selectionCriteria> has a value
     *
     * @return boolean
     */
    public function hasSelectionCriteria(){
      return $this->_has(5);
    }
    
    /**
     * Clear <selectionCriteria> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearSelectionCriteria(){
      return $this->_clear(5);
    }
    
    /**
     * Get <selectionCriteria> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function getSelectionCriteria(){
      return $this->_get(5);
    }
    
    /**
     * Set <selectionCriteria> value
     *
     * @param \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setSelectionCriteria(\obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <numberOfParticipants> has a value
     *
     * @return boolean
     */
    public function hasNumberOfParticipants(){
      return $this->_has(6);
    }
    
    /**
     * Clear <numberOfParticipants> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearNumberOfParticipants(){
      return $this->_clear(6);
    }
    
    /**
     * Get <numberOfParticipants> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function getNumberOfParticipants(){
      return $this->_get(6);
    }
    
    /**
     * Set <numberOfParticipants> value
     *
     * @param \obiba\mica\StudyDto\NumberOfParticipantsDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setNumberOfParticipants(\obiba\mica\StudyDto\NumberOfParticipantsDto $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(7);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearInfo(){
      return $this->_clear(7);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <dataCollectionEvents> has a value
     *
     * @return boolean
     */
    public function hasDataCollectionEvents(){
      return $this->_has(8);
    }
    
    /**
     * Clear <dataCollectionEvents> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearDataCollectionEvents(){
      return $this->_clear(8);
    }
    
    /**
     * Get <dataCollectionEvents> value
     *
     * @param int $idx
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function getDataCollectionEvents($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <dataCollectionEvents> value
     *
     * @param \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setDataCollectionEvents(\obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <dataCollectionEvents>
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto[]
     */
    public function getDataCollectionEventsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <dataCollectionEvents>
     *
     * @param \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addDataCollectionEvents(\obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(9);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearAttributes(){
      return $this->_clear(9);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(9, $value);
    }
  }
}

namespace obiba\mica {

  class StudyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $acronym = array();
    
    /**  @var \obiba\mica\AttachmentDto */
    public $logo = null;
    
    /**  @var \obiba\mica\PersonDto[]  */
    public $investigators = array();
    
    /**  @var \obiba\mica\PersonDto[]  */
    public $contacts = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $objectives = array();
    
    /**  @var string */
    public $website = null;
    
    /**  @var \obiba\mica\AuthorizationDto */
    public $specificAuthorization = null;
    
    /**  @var \obiba\mica\AuthorizationDto */
    public $maelstromAuthorization = null;
    
    /**  @var \obiba\mica\StudyDto\StudyMethodsDto */
    public $methods = null;
    
    /**  @var \obiba\mica\StudyDto\NumberOfParticipantsDto */
    public $numberOfParticipants = null;
    
    /**  @var int */
    public $startYear = null;
    
    /**  @var int */
    public $endYear = null;
    
    /**  @var string[]  */
    public $access = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherAccess = array();
    
    /**  @var string */
    public $markerPaper = null;
    
    /**  @var string */
    public $pubmedId = null;
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $attachments = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    
    /**  @var \obiba\mica\StudyDto\PopulationDto[]  */
    public $populations = array();
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    
    /**  @var string */
    public $opal = null;
    
    /**  @var string */
    public $opalUsername = null;
    
    /**  @var string */
    public $opalPassword = null;
    
    /**  @var \obiba\mica\PermissionsDto */
    public $permissions = null;
    
    /**  @var \obiba\mica\MembershipsDto[]  */
    public $memberships = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE acronym = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "acronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE logo = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "logo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE investigators = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "investigators";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PersonDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE contacts = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "contacts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PersonDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE objectives = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "objectives";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING website = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "website";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE specificAuthorization = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "specificAuthorization";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AuthorizationDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE maelstromAuthorization = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "maelstromAuthorization";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AuthorizationDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE methods = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "methods";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\StudyMethodsDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE numberOfParticipants = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "numberOfParticipants";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\NumberOfParticipantsDto';
      $descriptor->addField($f);

      // OPTIONAL INT32 startYear = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "startYear";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 endYear = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "endYear";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING access = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "access";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherAccess = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "otherAccess";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING markerPaper = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "markerPaper";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING pubmedId = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "pubmedId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE attachments = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "attachments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE populations = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "populations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      // OPTIONAL STRING opal = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "opal";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING opalUsername = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "opalUsername";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING opalPassword = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "opalPassword";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE permissions = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "permissions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\PermissionsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE memberships = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "memberships";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\MembershipsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearTimestamps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <acronym> has a value
     *
     * @return boolean
     */
    public function hasAcronym(){
      return $this->_has(4);
    }
    
    /**
     * Clear <acronym> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearAcronym(){
      return $this->_clear(4);
    }
    
    /**
     * Get <acronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getAcronym($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <acronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <acronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getAcronymList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <acronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <logo> has a value
     *
     * @return boolean
     */
    public function hasLogo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <logo> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearLogo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <logo> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function getLogo(){
      return $this->_get(5);
    }
    
    /**
     * Set <logo> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setLogo(\obiba\mica\AttachmentDto $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <investigators> has a value
     *
     * @return boolean
     */
    public function hasInvestigators(){
      return $this->_has(6);
    }
    
    /**
     * Clear <investigators> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearInvestigators(){
      return $this->_clear(6);
    }
    
    /**
     * Get <investigators> value
     *
     * @param int $idx
     * @return \obiba\mica\PersonDto
     */
    public function getInvestigators($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <investigators> value
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setInvestigators(\obiba\mica\PersonDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <investigators>
     *
     * @return \obiba\mica\PersonDto[]
     */
    public function getInvestigatorsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <investigators>
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addInvestigators(\obiba\mica\PersonDto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <contacts> has a value
     *
     * @return boolean
     */
    public function hasContacts(){
      return $this->_has(7);
    }
    
    /**
     * Clear <contacts> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearContacts(){
      return $this->_clear(7);
    }
    
    /**
     * Get <contacts> value
     *
     * @param int $idx
     * @return \obiba\mica\PersonDto
     */
    public function getContacts($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <contacts> value
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setContacts(\obiba\mica\PersonDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <contacts>
     *
     * @return \obiba\mica\PersonDto[]
     */
    public function getContactsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <contacts>
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addContacts(\obiba\mica\PersonDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <objectives> has a value
     *
     * @return boolean
     */
    public function hasObjectives(){
      return $this->_has(8);
    }
    
    /**
     * Clear <objectives> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearObjectives(){
      return $this->_clear(8);
    }
    
    /**
     * Get <objectives> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getObjectives($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <objectives> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setObjectives(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <objectives>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getObjectivesList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <objectives>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addObjectives(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <website> has a value
     *
     * @return boolean
     */
    public function hasWebsite(){
      return $this->_has(9);
    }
    
    /**
     * Clear <website> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearWebsite(){
      return $this->_clear(9);
    }
    
    /**
     * Get <website> value
     *
     * @return string
     */
    public function getWebsite(){
      return $this->_get(9);
    }
    
    /**
     * Set <website> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setWebsite( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <specificAuthorization> has a value
     *
     * @return boolean
     */
    public function hasSpecificAuthorization(){
      return $this->_has(10);
    }
    
    /**
     * Clear <specificAuthorization> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearSpecificAuthorization(){
      return $this->_clear(10);
    }
    
    /**
     * Get <specificAuthorization> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function getSpecificAuthorization(){
      return $this->_get(10);
    }
    
    /**
     * Set <specificAuthorization> value
     *
     * @param \obiba\mica\AuthorizationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setSpecificAuthorization(\obiba\mica\AuthorizationDto $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <maelstromAuthorization> has a value
     *
     * @return boolean
     */
    public function hasMaelstromAuthorization(){
      return $this->_has(11);
    }
    
    /**
     * Clear <maelstromAuthorization> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearMaelstromAuthorization(){
      return $this->_clear(11);
    }
    
    /**
     * Get <maelstromAuthorization> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function getMaelstromAuthorization(){
      return $this->_get(11);
    }
    
    /**
     * Set <maelstromAuthorization> value
     *
     * @param \obiba\mica\AuthorizationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setMaelstromAuthorization(\obiba\mica\AuthorizationDto $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <methods> has a value
     *
     * @return boolean
     */
    public function hasMethods(){
      return $this->_has(12);
    }
    
    /**
     * Clear <methods> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearMethods(){
      return $this->_clear(12);
    }
    
    /**
     * Get <methods> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function getMethods(){
      return $this->_get(12);
    }
    
    /**
     * Set <methods> value
     *
     * @param \obiba\mica\StudyDto\StudyMethodsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setMethods(\obiba\mica\StudyDto\StudyMethodsDto $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <numberOfParticipants> has a value
     *
     * @return boolean
     */
    public function hasNumberOfParticipants(){
      return $this->_has(13);
    }
    
    /**
     * Clear <numberOfParticipants> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearNumberOfParticipants(){
      return $this->_clear(13);
    }
    
    /**
     * Get <numberOfParticipants> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function getNumberOfParticipants(){
      return $this->_get(13);
    }
    
    /**
     * Set <numberOfParticipants> value
     *
     * @param \obiba\mica\StudyDto\NumberOfParticipantsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setNumberOfParticipants(\obiba\mica\StudyDto\NumberOfParticipantsDto $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <startYear> has a value
     *
     * @return boolean
     */
    public function hasStartYear(){
      return $this->_has(14);
    }
    
    /**
     * Clear <startYear> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearStartYear(){
      return $this->_clear(14);
    }
    
    /**
     * Get <startYear> value
     *
     * @return int
     */
    public function getStartYear(){
      return $this->_get(14);
    }
    
    /**
     * Set <startYear> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto
     */
    public function setStartYear( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <endYear> has a value
     *
     * @return boolean
     */
    public function hasEndYear(){
      return $this->_has(15);
    }
    
    /**
     * Clear <endYear> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearEndYear(){
      return $this->_clear(15);
    }
    
    /**
     * Get <endYear> value
     *
     * @return int
     */
    public function getEndYear(){
      return $this->_get(15);
    }
    
    /**
     * Set <endYear> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto
     */
    public function setEndYear( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <access> has a value
     *
     * @return boolean
     */
    public function hasAccess(){
      return $this->_has(16);
    }
    
    /**
     * Clear <access> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearAccess(){
      return $this->_clear(16);
    }
    
    /**
     * Get <access> value
     *
     * @param int $idx
     * @return string
     */
    public function getAccess($idx = NULL){
      return $this->_get(16, $idx);
    }
    
    /**
     * Set <access> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setAccess( $value, $idx = NULL){
      return $this->_set(16, $value, $idx);
    }
    
    /**
     * Get all elements of <access>
     *
     * @return string[]
     */
    public function getAccessList(){
     return $this->_get(16);
    }
    
    /**
     * Add a new element to <access>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function addAccess( $value){
     return $this->_add(16, $value);
    }
    
    /**
     * Check if <otherAccess> has a value
     *
     * @return boolean
     */
    public function hasOtherAccess(){
      return $this->_has(17);
    }
    
    /**
     * Clear <otherAccess> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearOtherAccess(){
      return $this->_clear(17);
    }
    
    /**
     * Get <otherAccess> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherAccess($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <otherAccess> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setOtherAccess(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <otherAccess>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherAccessList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <otherAccess>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addOtherAccess(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <markerPaper> has a value
     *
     * @return boolean
     */
    public function hasMarkerPaper(){
      return $this->_has(18);
    }
    
    /**
     * Clear <markerPaper> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearMarkerPaper(){
      return $this->_clear(18);
    }
    
    /**
     * Get <markerPaper> value
     *
     * @return string
     */
    public function getMarkerPaper(){
      return $this->_get(18);
    }
    
    /**
     * Set <markerPaper> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setMarkerPaper( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <pubmedId> has a value
     *
     * @return boolean
     */
    public function hasPubmedId(){
      return $this->_has(19);
    }
    
    /**
     * Clear <pubmedId> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearPubmedId(){
      return $this->_clear(19);
    }
    
    /**
     * Get <pubmedId> value
     *
     * @return string
     */
    public function getPubmedId(){
      return $this->_get(19);
    }
    
    /**
     * Set <pubmedId> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setPubmedId( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <attachments> has a value
     *
     * @return boolean
     */
    public function hasAttachments(){
      return $this->_has(20);
    }
    
    /**
     * Clear <attachments> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearAttachments(){
      return $this->_clear(20);
    }
    
    /**
     * Get <attachments> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachments($idx = NULL){
      return $this->_get(20, $idx);
    }
    
    /**
     * Set <attachments> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setAttachments(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(20, $value, $idx);
    }
    
    /**
     * Get all elements of <attachments>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getAttachmentsList(){
     return $this->_get(20);
    }
    
    /**
     * Add a new element to <attachments>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addAttachments(\obiba\mica\AttachmentDto $value){
     return $this->_add(20, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(21);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearInfo(){
      return $this->_clear(21);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(21, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(21, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(21);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(21, $value);
    }
    
    /**
     * Check if <populations> has a value
     *
     * @return boolean
     */
    public function hasPopulations(){
      return $this->_has(22);
    }
    
    /**
     * Clear <populations> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearPopulations(){
      return $this->_clear(22);
    }
    
    /**
     * Get <populations> value
     *
     * @param int $idx
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function getPopulations($idx = NULL){
      return $this->_get(22, $idx);
    }
    
    /**
     * Set <populations> value
     *
     * @param \obiba\mica\StudyDto\PopulationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setPopulations(\obiba\mica\StudyDto\PopulationDto $value, $idx = NULL){
      return $this->_set(22, $value, $idx);
    }
    
    /**
     * Get all elements of <populations>
     *
     * @return \obiba\mica\StudyDto\PopulationDto[]
     */
    public function getPopulationsList(){
     return $this->_get(22);
    }
    
    /**
     * Add a new element to <populations>
     *
     * @param \obiba\mica\StudyDto\PopulationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addPopulations(\obiba\mica\StudyDto\PopulationDto $value){
     return $this->_add(22, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(24);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearAttributes(){
      return $this->_clear(24);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(24, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(24, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(24);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(24, $value);
    }
    
    /**
     * Check if <opal> has a value
     *
     * @return boolean
     */
    public function hasOpal(){
      return $this->_has(25);
    }
    
    /**
     * Clear <opal> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearOpal(){
      return $this->_clear(25);
    }
    
    /**
     * Get <opal> value
     *
     * @return string
     */
    public function getOpal(){
      return $this->_get(25);
    }
    
    /**
     * Set <opal> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setOpal( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <opalUsername> has a value
     *
     * @return boolean
     */
    public function hasOpalUsername(){
      return $this->_has(26);
    }
    
    /**
     * Clear <opalUsername> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearOpalUsername(){
      return $this->_clear(26);
    }
    
    /**
     * Get <opalUsername> value
     *
     * @return string
     */
    public function getOpalUsername(){
      return $this->_get(26);
    }
    
    /**
     * Set <opalUsername> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setOpalUsername( $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <opalPassword> has a value
     *
     * @return boolean
     */
    public function hasOpalPassword(){
      return $this->_has(27);
    }
    
    /**
     * Clear <opalPassword> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearOpalPassword(){
      return $this->_clear(27);
    }
    
    /**
     * Get <opalPassword> value
     *
     * @return string
     */
    public function getOpalPassword(){
      return $this->_get(27);
    }
    
    /**
     * Set <opalPassword> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setOpalPassword( $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <permissions> has a value
     *
     * @return boolean
     */
    public function hasPermissions(){
      return $this->_has(28);
    }
    
    /**
     * Clear <permissions> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearPermissions(){
      return $this->_clear(28);
    }
    
    /**
     * Get <permissions> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function getPermissions(){
      return $this->_get(28);
    }
    
    /**
     * Set <permissions> value
     *
     * @param \obiba\mica\PermissionsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setPermissions(\obiba\mica\PermissionsDto $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <memberships> has a value
     *
     * @return boolean
     */
    public function hasMemberships(){
      return $this->_has(29);
    }
    
    /**
     * Clear <memberships> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearMemberships(){
      return $this->_clear(29);
    }
    
    /**
     * Get <memberships> value
     *
     * @param int $idx
     * @return \obiba\mica\MembershipsDto
     */
    public function getMemberships($idx = NULL){
      return $this->_get(29, $idx);
    }
    
    /**
     * Set <memberships> value
     *
     * @param \obiba\mica\MembershipsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setMemberships(\obiba\mica\MembershipsDto $value, $idx = NULL){
      return $this->_set(29, $value, $idx);
    }
    
    /**
     * Get all elements of <memberships>
     *
     * @return \obiba\mica\MembershipsDto[]
     */
    public function getMembershipsList(){
     return $this->_get(29);
    }
    
    /**
     * Add a new element to <memberships>
     *
     * @param \obiba\mica\MembershipsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addMemberships(\obiba\mica\MembershipsDto $value){
     return $this->_add(29, $value);
    }
  }
}

namespace obiba\mica {

  class OpalCredentialDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \obiba\mica\OpalCredentialType */
    public $type = null;
    
    /**  @var string */
    public $opalUrl = null;
    
    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $password = null;
    
    /**  @var \obiba\mica\KeyForm */
    public $keyForm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.OpalCredentialDto');

      // REQUIRED ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\OpalCredentialType';
      $descriptor->addField($f);

      // REQUIRED STRING opalUrl = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "opalUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING username = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING password = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "password";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE keyForm = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "keyForm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\KeyForm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \obiba\mica\OpalCredentialDto
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \obiba\mica\OpalCredentialType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \obiba\mica\OpalCredentialType $value
     * @return \obiba\mica\OpalCredentialDto
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <opalUrl> has a value
     *
     * @return boolean
     */
    public function hasOpalUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <opalUrl> value
     *
     * @return \obiba\mica\OpalCredentialDto
     */
    public function clearOpalUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <opalUrl> value
     *
     * @return string
     */
    public function getOpalUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <opalUrl> value
     *
     * @param string $value
     * @return \obiba\mica\OpalCredentialDto
     */
    public function setOpalUrl( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(3);
    }
    
    /**
     * Clear <username> value
     *
     * @return \obiba\mica\OpalCredentialDto
     */
    public function clearUsername(){
      return $this->_clear(3);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(3);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \obiba\mica\OpalCredentialDto
     */
    public function setUsername( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <password> has a value
     *
     * @return boolean
     */
    public function hasPassword(){
      return $this->_has(4);
    }
    
    /**
     * Clear <password> value
     *
     * @return \obiba\mica\OpalCredentialDto
     */
    public function clearPassword(){
      return $this->_clear(4);
    }
    
    /**
     * Get <password> value
     *
     * @return string
     */
    public function getPassword(){
      return $this->_get(4);
    }
    
    /**
     * Set <password> value
     *
     * @param string $value
     * @return \obiba\mica\OpalCredentialDto
     */
    public function setPassword( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <keyForm> has a value
     *
     * @return boolean
     */
    public function hasKeyForm(){
      return $this->_has(5);
    }
    
    /**
     * Clear <keyForm> value
     *
     * @return \obiba\mica\OpalCredentialDto
     */
    public function clearKeyForm(){
      return $this->_clear(5);
    }
    
    /**
     * Get <keyForm> value
     *
     * @return \obiba\mica\KeyForm
     */
    public function getKeyForm(){
      return $this->_get(5);
    }
    
    /**
     * Set <keyForm> value
     *
     * @param \obiba\mica\KeyForm $value
     * @return \obiba\mica\OpalCredentialDto
     */
    public function setKeyForm(\obiba\mica\KeyForm $value){
      return $this->_set(5, $value);
    }
  }
}

namespace obiba\mica {

  class KeyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $alias = null;
    
    /**  @var string */
    public $certificate = null;
    
    /**  @var int - \obiba\mica\KeyType */
    public $keyType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.KeyDto');

      // REQUIRED STRING alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "alias";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING certificate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "certificate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM keyType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keyType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\KeyType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <alias> has a value
     *
     * @return boolean
     */
    public function hasAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <alias> value
     *
     * @return \obiba\mica\KeyDto
     */
    public function clearAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <alias> value
     *
     * @return string
     */
    public function getAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <alias> value
     *
     * @param string $value
     * @return \obiba\mica\KeyDto
     */
    public function setAlias( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <certificate> has a value
     *
     * @return boolean
     */
    public function hasCertificate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <certificate> value
     *
     * @return \obiba\mica\KeyDto
     */
    public function clearCertificate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <certificate> value
     *
     * @return string
     */
    public function getCertificate(){
      return $this->_get(2);
    }
    
    /**
     * Set <certificate> value
     *
     * @param string $value
     * @return \obiba\mica\KeyDto
     */
    public function setCertificate( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <keyType> has a value
     *
     * @return boolean
     */
    public function hasKeyType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <keyType> value
     *
     * @return \obiba\mica\KeyDto
     */
    public function clearKeyType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <keyType> value
     *
     * @return int - \obiba\mica\KeyType
     */
    public function getKeyType(){
      return $this->_get(3);
    }
    
    /**
     * Set <keyType> value
     *
     * @param int - \obiba\mica\KeyType $value
     * @return \obiba\mica\KeyDto
     */
    public function setKeyType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class KeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $alias = null;
    
    /**  @var \obiba\mica\PrivateKeyForm */
    public $privateForm = null;
    
    /**  @var string */
    public $privateImport = null;
    
    /**  @var \obiba\mica\PublicKeyForm */
    public $publicForm = null;
    
    /**  @var string */
    public $publicImport = null;
    
    /**  @var string */
    public $certificateFile = null;
    
    /**  @var int - \obiba\mica\KeyType */
    public $keyType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.KeyForm');

      // OPTIONAL STRING alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "alias";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE privateForm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "privateForm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\PrivateKeyForm';
      $descriptor->addField($f);

      // OPTIONAL STRING privateImport = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "privateImport";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE publicForm = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "publicForm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\PublicKeyForm';
      $descriptor->addField($f);

      // OPTIONAL STRING publicImport = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "publicImport";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING certificateFile = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "certificateFile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED ENUM keyType = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "keyType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\KeyType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <alias> has a value
     *
     * @return boolean
     */
    public function hasAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <alias> value
     *
     * @return \obiba\mica\KeyForm
     */
    public function clearAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <alias> value
     *
     * @return string
     */
    public function getAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <alias> value
     *
     * @param string $value
     * @return \obiba\mica\KeyForm
     */
    public function setAlias( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <privateForm> has a value
     *
     * @return boolean
     */
    public function hasPrivateForm(){
      return $this->_has(2);
    }
    
    /**
     * Clear <privateForm> value
     *
     * @return \obiba\mica\KeyForm
     */
    public function clearPrivateForm(){
      return $this->_clear(2);
    }
    
    /**
     * Get <privateForm> value
     *
     * @return \obiba\mica\PrivateKeyForm
     */
    public function getPrivateForm(){
      return $this->_get(2);
    }
    
    /**
     * Set <privateForm> value
     *
     * @param \obiba\mica\PrivateKeyForm $value
     * @return \obiba\mica\KeyForm
     */
    public function setPrivateForm(\obiba\mica\PrivateKeyForm $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <privateImport> has a value
     *
     * @return boolean
     */
    public function hasPrivateImport(){
      return $this->_has(3);
    }
    
    /**
     * Clear <privateImport> value
     *
     * @return \obiba\mica\KeyForm
     */
    public function clearPrivateImport(){
      return $this->_clear(3);
    }
    
    /**
     * Get <privateImport> value
     *
     * @return string
     */
    public function getPrivateImport(){
      return $this->_get(3);
    }
    
    /**
     * Set <privateImport> value
     *
     * @param string $value
     * @return \obiba\mica\KeyForm
     */
    public function setPrivateImport( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <publicForm> has a value
     *
     * @return boolean
     */
    public function hasPublicForm(){
      return $this->_has(4);
    }
    
    /**
     * Clear <publicForm> value
     *
     * @return \obiba\mica\KeyForm
     */
    public function clearPublicForm(){
      return $this->_clear(4);
    }
    
    /**
     * Get <publicForm> value
     *
     * @return \obiba\mica\PublicKeyForm
     */
    public function getPublicForm(){
      return $this->_get(4);
    }
    
    /**
     * Set <publicForm> value
     *
     * @param \obiba\mica\PublicKeyForm $value
     * @return \obiba\mica\KeyForm
     */
    public function setPublicForm(\obiba\mica\PublicKeyForm $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <publicImport> has a value
     *
     * @return boolean
     */
    public function hasPublicImport(){
      return $this->_has(5);
    }
    
    /**
     * Clear <publicImport> value
     *
     * @return \obiba\mica\KeyForm
     */
    public function clearPublicImport(){
      return $this->_clear(5);
    }
    
    /**
     * Get <publicImport> value
     *
     * @return string
     */
    public function getPublicImport(){
      return $this->_get(5);
    }
    
    /**
     * Set <publicImport> value
     *
     * @param string $value
     * @return \obiba\mica\KeyForm
     */
    public function setPublicImport( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <certificateFile> has a value
     *
     * @return boolean
     */
    public function hasCertificateFile(){
      return $this->_has(6);
    }
    
    /**
     * Clear <certificateFile> value
     *
     * @return \obiba\mica\KeyForm
     */
    public function clearCertificateFile(){
      return $this->_clear(6);
    }
    
    /**
     * Get <certificateFile> value
     *
     * @return string
     */
    public function getCertificateFile(){
      return $this->_get(6);
    }
    
    /**
     * Set <certificateFile> value
     *
     * @param string $value
     * @return \obiba\mica\KeyForm
     */
    public function setCertificateFile( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <keyType> has a value
     *
     * @return boolean
     */
    public function hasKeyType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <keyType> value
     *
     * @return \obiba\mica\KeyForm
     */
    public function clearKeyType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <keyType> value
     *
     * @return int - \obiba\mica\KeyType
     */
    public function getKeyType(){
      return $this->_get(7);
    }
    
    /**
     * Set <keyType> value
     *
     * @param int - \obiba\mica\KeyType $value
     * @return \obiba\mica\KeyForm
     */
    public function setKeyType( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace obiba\mica {

  class PrivateKeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $algo = null;
    
    /**  @var int */
    public $size = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.PrivateKeyForm');

      // REQUIRED STRING algo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "algo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <algo> has a value
     *
     * @return boolean
     */
    public function hasAlgo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <algo> value
     *
     * @return \obiba\mica\PrivateKeyForm
     */
    public function clearAlgo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <algo> value
     *
     * @return string
     */
    public function getAlgo(){
      return $this->_get(1);
    }
    
    /**
     * Set <algo> value
     *
     * @param string $value
     * @return \obiba\mica\PrivateKeyForm
     */
    public function setAlgo( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <size> value
     *
     * @return \obiba\mica\PrivateKeyForm
     */
    public function clearSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \obiba\mica\PrivateKeyForm
     */
    public function setSize( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class PublicKeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $organizationalUnit = null;
    
    /**  @var string */
    public $organization = null;
    
    /**  @var string */
    public $locality = null;
    
    /**  @var string */
    public $state = null;
    
    /**  @var string */
    public $country = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.PublicKeyForm');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING organizationalUnit = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "organizationalUnit";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING organization = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "organization";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING locality = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "locality";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING state = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING country = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "country";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\PublicKeyForm
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\PublicKeyForm
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <organizationalUnit> has a value
     *
     * @return boolean
     */
    public function hasOrganizationalUnit(){
      return $this->_has(2);
    }
    
    /**
     * Clear <organizationalUnit> value
     *
     * @return \obiba\mica\PublicKeyForm
     */
    public function clearOrganizationalUnit(){
      return $this->_clear(2);
    }
    
    /**
     * Get <organizationalUnit> value
     *
     * @return string
     */
    public function getOrganizationalUnit(){
      return $this->_get(2);
    }
    
    /**
     * Set <organizationalUnit> value
     *
     * @param string $value
     * @return \obiba\mica\PublicKeyForm
     */
    public function setOrganizationalUnit( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <organization> has a value
     *
     * @return boolean
     */
    public function hasOrganization(){
      return $this->_has(3);
    }
    
    /**
     * Clear <organization> value
     *
     * @return \obiba\mica\PublicKeyForm
     */
    public function clearOrganization(){
      return $this->_clear(3);
    }
    
    /**
     * Get <organization> value
     *
     * @return string
     */
    public function getOrganization(){
      return $this->_get(3);
    }
    
    /**
     * Set <organization> value
     *
     * @param string $value
     * @return \obiba\mica\PublicKeyForm
     */
    public function setOrganization( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <locality> has a value
     *
     * @return boolean
     */
    public function hasLocality(){
      return $this->_has(4);
    }
    
    /**
     * Clear <locality> value
     *
     * @return \obiba\mica\PublicKeyForm
     */
    public function clearLocality(){
      return $this->_clear(4);
    }
    
    /**
     * Get <locality> value
     *
     * @return string
     */
    public function getLocality(){
      return $this->_get(4);
    }
    
    /**
     * Set <locality> value
     *
     * @param string $value
     * @return \obiba\mica\PublicKeyForm
     */
    public function setLocality( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(5);
    }
    
    /**
     * Clear <state> value
     *
     * @return \obiba\mica\PublicKeyForm
     */
    public function clearState(){
      return $this->_clear(5);
    }
    
    /**
     * Get <state> value
     *
     * @return string
     */
    public function getState(){
      return $this->_get(5);
    }
    
    /**
     * Set <state> value
     *
     * @param string $value
     * @return \obiba\mica\PublicKeyForm
     */
    public function setState( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <country> has a value
     *
     * @return boolean
     */
    public function hasCountry(){
      return $this->_has(6);
    }
    
    /**
     * Clear <country> value
     *
     * @return \obiba\mica\PublicKeyForm
     */
    public function clearCountry(){
      return $this->_clear(6);
    }
    
    /**
     * Get <country> value
     *
     * @return string
     */
    public function getCountry(){
      return $this->_get(6);
    }
    
    /**
     * Set <country> value
     *
     * @param string $value
     * @return \obiba\mica\PublicKeyForm
     */
    public function setCountry( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace obiba\mica {

  class DocumentDigestDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DocumentDigestDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\DocumentDigestDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\DocumentDigestDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\DocumentDigestDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DocumentDigestDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DocumentDigestDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class NetworkDigestDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $ids = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.NetworkDigestDto');

      // REPEATED STRING ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ids> has a value
     *
     * @return boolean
     */
    public function hasIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ids> value
     *
     * @return \obiba\mica\NetworkDigestDto
     */
    public function clearIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getIds($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <ids> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkDigestDto
     */
    public function setIds( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <ids>
     *
     * @return string[]
     */
    public function getIdsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <ids>
     *
     * @param string $value
     * @return \obiba\mica\NetworkDigestDto
     */
    public function addIds( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace obiba\mica {

  class NetworkDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $acronym = array();
    
    /**  @var \obiba\mica\PersonDto[]  */
    public $investigators = array();
    
    /**  @var \obiba\mica\PersonDto[]  */
    public $contacts = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var string */
    public $website = null;
    
    /**  @var \obiba\mica\AuthorizationDto */
    public $maelstromAuthorization = null;
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $attachments = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    
    /**  @var string[]  */
    public $studyIds = array();
    
    /**  @var \obiba\mica\StudySummaryDto[]  */
    public $studySummaries = array();
    
    /**  @var boolean */
    public $published = null;
    
    /**  @var \obiba\mica\AttachmentDto */
    public $logo = null;
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    
    /**  @var \obiba\mica\MembershipsDto[]  */
    public $memberships = array();
    
    /**  @var string[]  */
    public $networkIds = array();
    
    /**  @var \obiba\mica\NetworkSummaryDto[]  */
    public $networkSummaries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.NetworkDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE acronym = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "acronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE investigators = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "investigators";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PersonDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE contacts = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "contacts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PersonDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING website = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "website";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE maelstromAuthorization = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "maelstromAuthorization";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AuthorizationDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attachments = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "attachments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING studyIds = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "studyIds";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE studySummaries = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "studySummaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudySummaryDto';
      $descriptor->addField($f);

      // OPTIONAL BOOL published = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "published";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE logo = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "logo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE memberships = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "memberships";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\MembershipsDto';
      $descriptor->addField($f);

      // REPEATED STRING networkIds = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "networkIds";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE networkSummaries = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "networkSummaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\NetworkSummaryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearTimestamps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <acronym> has a value
     *
     * @return boolean
     */
    public function hasAcronym(){
      return $this->_has(4);
    }
    
    /**
     * Clear <acronym> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearAcronym(){
      return $this->_clear(4);
    }
    
    /**
     * Get <acronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getAcronym($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <acronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <acronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getAcronymList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <acronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <investigators> has a value
     *
     * @return boolean
     */
    public function hasInvestigators(){
      return $this->_has(5);
    }
    
    /**
     * Clear <investigators> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearInvestigators(){
      return $this->_clear(5);
    }
    
    /**
     * Get <investigators> value
     *
     * @param int $idx
     * @return \obiba\mica\PersonDto
     */
    public function getInvestigators($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <investigators> value
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setInvestigators(\obiba\mica\PersonDto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <investigators>
     *
     * @return \obiba\mica\PersonDto[]
     */
    public function getInvestigatorsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <investigators>
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addInvestigators(\obiba\mica\PersonDto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <contacts> has a value
     *
     * @return boolean
     */
    public function hasContacts(){
      return $this->_has(6);
    }
    
    /**
     * Clear <contacts> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearContacts(){
      return $this->_clear(6);
    }
    
    /**
     * Get <contacts> value
     *
     * @param int $idx
     * @return \obiba\mica\PersonDto
     */
    public function getContacts($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <contacts> value
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setContacts(\obiba\mica\PersonDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <contacts>
     *
     * @return \obiba\mica\PersonDto[]
     */
    public function getContactsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <contacts>
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addContacts(\obiba\mica\PersonDto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(7);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearDescription(){
      return $this->_clear(7);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <website> has a value
     *
     * @return boolean
     */
    public function hasWebsite(){
      return $this->_has(8);
    }
    
    /**
     * Clear <website> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearWebsite(){
      return $this->_clear(8);
    }
    
    /**
     * Get <website> value
     *
     * @return string
     */
    public function getWebsite(){
      return $this->_get(8);
    }
    
    /**
     * Set <website> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto
     */
    public function setWebsite( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <maelstromAuthorization> has a value
     *
     * @return boolean
     */
    public function hasMaelstromAuthorization(){
      return $this->_has(9);
    }
    
    /**
     * Clear <maelstromAuthorization> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearMaelstromAuthorization(){
      return $this->_clear(9);
    }
    
    /**
     * Get <maelstromAuthorization> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function getMaelstromAuthorization(){
      return $this->_get(9);
    }
    
    /**
     * Set <maelstromAuthorization> value
     *
     * @param \obiba\mica\AuthorizationDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setMaelstromAuthorization(\obiba\mica\AuthorizationDto $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <attachments> has a value
     *
     * @return boolean
     */
    public function hasAttachments(){
      return $this->_has(10);
    }
    
    /**
     * Clear <attachments> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearAttachments(){
      return $this->_clear(10);
    }
    
    /**
     * Get <attachments> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachments($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <attachments> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setAttachments(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <attachments>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getAttachmentsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <attachments>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addAttachments(\obiba\mica\AttachmentDto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(11);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearInfo(){
      return $this->_clear(11);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <studyIds> has a value
     *
     * @return boolean
     */
    public function hasStudyIds(){
      return $this->_has(12);
    }
    
    /**
     * Clear <studyIds> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearStudyIds(){
      return $this->_clear(12);
    }
    
    /**
     * Get <studyIds> value
     *
     * @param int $idx
     * @return string
     */
    public function getStudyIds($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <studyIds> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto
     */
    public function setStudyIds( $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <studyIds>
     *
     * @return string[]
     */
    public function getStudyIdsList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <studyIds>
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto
     */
    public function addStudyIds( $value){
     return $this->_add(12, $value);
    }
    
    /**
     * Check if <studySummaries> has a value
     *
     * @return boolean
     */
    public function hasStudySummaries(){
      return $this->_has(13);
    }
    
    /**
     * Clear <studySummaries> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearStudySummaries(){
      return $this->_clear(13);
    }
    
    /**
     * Get <studySummaries> value
     *
     * @param int $idx
     * @return \obiba\mica\StudySummaryDto
     */
    public function getStudySummaries($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <studySummaries> value
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setStudySummaries(\obiba\mica\StudySummaryDto $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <studySummaries>
     *
     * @return \obiba\mica\StudySummaryDto[]
     */
    public function getStudySummariesList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <studySummaries>
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addStudySummaries(\obiba\mica\StudySummaryDto $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <published> has a value
     *
     * @return boolean
     */
    public function hasPublished(){
      return $this->_has(14);
    }
    
    /**
     * Clear <published> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearPublished(){
      return $this->_clear(14);
    }
    
    /**
     * Get <published> value
     *
     * @return boolean
     */
    public function getPublished(){
      return $this->_get(14);
    }
    
    /**
     * Set <published> value
     *
     * @param boolean $value
     * @return \obiba\mica\NetworkDto
     */
    public function setPublished( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <logo> has a value
     *
     * @return boolean
     */
    public function hasLogo(){
      return $this->_has(15);
    }
    
    /**
     * Clear <logo> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearLogo(){
      return $this->_clear(15);
    }
    
    /**
     * Get <logo> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function getLogo(){
      return $this->_get(15);
    }
    
    /**
     * Set <logo> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setLogo(\obiba\mica\AttachmentDto $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(16);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearAttributes(){
      return $this->_clear(16);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(16, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(16, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(16);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(16, $value);
    }
    
    /**
     * Check if <memberships> has a value
     *
     * @return boolean
     */
    public function hasMemberships(){
      return $this->_has(17);
    }
    
    /**
     * Clear <memberships> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearMemberships(){
      return $this->_clear(17);
    }
    
    /**
     * Get <memberships> value
     *
     * @param int $idx
     * @return \obiba\mica\MembershipsDto
     */
    public function getMemberships($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <memberships> value
     *
     * @param \obiba\mica\MembershipsDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setMemberships(\obiba\mica\MembershipsDto $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <memberships>
     *
     * @return \obiba\mica\MembershipsDto[]
     */
    public function getMembershipsList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <memberships>
     *
     * @param \obiba\mica\MembershipsDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addMemberships(\obiba\mica\MembershipsDto $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <networkIds> has a value
     *
     * @return boolean
     */
    public function hasNetworkIds(){
      return $this->_has(18);
    }
    
    /**
     * Clear <networkIds> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearNetworkIds(){
      return $this->_clear(18);
    }
    
    /**
     * Get <networkIds> value
     *
     * @param int $idx
     * @return string
     */
    public function getNetworkIds($idx = NULL){
      return $this->_get(18, $idx);
    }
    
    /**
     * Set <networkIds> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto
     */
    public function setNetworkIds( $value, $idx = NULL){
      return $this->_set(18, $value, $idx);
    }
    
    /**
     * Get all elements of <networkIds>
     *
     * @return string[]
     */
    public function getNetworkIdsList(){
     return $this->_get(18);
    }
    
    /**
     * Add a new element to <networkIds>
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto
     */
    public function addNetworkIds( $value){
     return $this->_add(18, $value);
    }
    
    /**
     * Check if <networkSummaries> has a value
     *
     * @return boolean
     */
    public function hasNetworkSummaries(){
      return $this->_has(19);
    }
    
    /**
     * Clear <networkSummaries> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearNetworkSummaries(){
      return $this->_clear(19);
    }
    
    /**
     * Get <networkSummaries> value
     *
     * @param int $idx
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function getNetworkSummaries($idx = NULL){
      return $this->_get(19, $idx);
    }
    
    /**
     * Set <networkSummaries> value
     *
     * @param \obiba\mica\NetworkSummaryDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setNetworkSummaries(\obiba\mica\NetworkSummaryDto $value, $idx = NULL){
      return $this->_set(19, $value, $idx);
    }
    
    /**
     * Get all elements of <networkSummaries>
     *
     * @return \obiba\mica\NetworkSummaryDto[]
     */
    public function getNetworkSummariesList(){
     return $this->_get(19);
    }
    
    /**
     * Add a new element to <networkSummaries>
     *
     * @param \obiba\mica\NetworkSummaryDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addNetworkSummaries(\obiba\mica\NetworkSummaryDto $value){
     return $this->_add(19, $value);
    }
  }
}

namespace obiba\mica {

  class NetworksDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $from = null;
    
    /**  @var int */
    public $limit = null;
    
    /**  @var \obiba\mica\NetworkDto[]  */
    public $networks = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.NetworksDto');

      // REQUIRED INT32 total = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 from = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 limit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE networks = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "networks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\NetworkDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <total> value
     *
     * @return \obiba\mica\NetworksDto
     */
    public function clearTotal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(1);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \obiba\mica\NetworksDto
     */
    public function setTotal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(2);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\NetworksDto
     */
    public function clearFrom(){
      return $this->_clear(2);
    }
    
    /**
     * Get <from> value
     *
     * @return int
     */
    public function getFrom(){
      return $this->_get(2);
    }
    
    /**
     * Set <from> value
     *
     * @param int $value
     * @return \obiba\mica\NetworksDto
     */
    public function setFrom( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <limit> value
     *
     * @return \obiba\mica\NetworksDto
     */
    public function clearLimit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(3);
    }
    
    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \obiba\mica\NetworksDto
     */
    public function setLimit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <networks> has a value
     *
     * @return boolean
     */
    public function hasNetworks(){
      return $this->_has(4);
    }
    
    /**
     * Clear <networks> value
     *
     * @return \obiba\mica\NetworksDto
     */
    public function clearNetworks(){
      return $this->_clear(4);
    }
    
    /**
     * Get <networks> value
     *
     * @param int $idx
     * @return \obiba\mica\NetworkDto
     */
    public function getNetworks($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <networks> value
     *
     * @param \obiba\mica\NetworkDto $value
     * @return \obiba\mica\NetworksDto
     */
    public function setNetworks(\obiba\mica\NetworkDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <networks>
     *
     * @return \obiba\mica\NetworkDto[]
     */
    public function getNetworksList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <networks>
     *
     * @param \obiba\mica\NetworkDto $value
     * @return \obiba\mica\NetworksDto
     */
    public function addNetworks(\obiba\mica\NetworkDto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace obiba\mica {

  class NetworkSummaryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $acronym = array();
    
    /**  @var boolean */
    public $published = null;
    
    /**  @var string[]  */
    public $studyIds = array();
    
    /**  @var string[]  */
    public $networkIds = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.NetworkSummaryDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE acronym = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "acronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REQUIRED BOOL published = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "published";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING studyIds = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "studyIds";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING networkIds = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "networkIds";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function clearTimestamps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <acronym> has a value
     *
     * @return boolean
     */
    public function hasAcronym(){
      return $this->_has(4);
    }
    
    /**
     * Clear <acronym> value
     *
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function clearAcronym(){
      return $this->_clear(4);
    }
    
    /**
     * Get <acronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getAcronym($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <acronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function setAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <acronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getAcronymList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <acronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function addAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <published> has a value
     *
     * @return boolean
     */
    public function hasPublished(){
      return $this->_has(5);
    }
    
    /**
     * Clear <published> value
     *
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function clearPublished(){
      return $this->_clear(5);
    }
    
    /**
     * Get <published> value
     *
     * @return boolean
     */
    public function getPublished(){
      return $this->_get(5);
    }
    
    /**
     * Set <published> value
     *
     * @param boolean $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function setPublished( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <studyIds> has a value
     *
     * @return boolean
     */
    public function hasStudyIds(){
      return $this->_has(6);
    }
    
    /**
     * Clear <studyIds> value
     *
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function clearStudyIds(){
      return $this->_clear(6);
    }
    
    /**
     * Get <studyIds> value
     *
     * @param int $idx
     * @return string
     */
    public function getStudyIds($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <studyIds> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function setStudyIds( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <studyIds>
     *
     * @return string[]
     */
    public function getStudyIdsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <studyIds>
     *
     * @param string $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function addStudyIds( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <networkIds> has a value
     *
     * @return boolean
     */
    public function hasNetworkIds(){
      return $this->_has(7);
    }
    
    /**
     * Clear <networkIds> value
     *
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function clearNetworkIds(){
      return $this->_clear(7);
    }
    
    /**
     * Get <networkIds> value
     *
     * @param int $idx
     * @return string
     */
    public function getNetworkIds($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <networkIds> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function setNetworkIds( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <networkIds>
     *
     * @return string[]
     */
    public function getNetworkIdsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <networkIds>
     *
     * @param string $value
     * @return \obiba\mica\NetworkSummaryDto
     */
    public function addNetworkIds( $value){
     return $this->_add(7, $value);
    }
  }
}

namespace obiba\mica {

  class TimestampsDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $created = null;
    
    /**  @var string */
    public $lastUpdate = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TimestampsDto');

      // OPTIONAL STRING created = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING lastUpdate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lastUpdate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(1);
    }
    
    /**
     * Clear <created> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function clearCreated(){
      return $this->_clear(1);
    }
    
    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated(){
      return $this->_get(1);
    }
    
    /**
     * Set <created> value
     *
     * @param string $value
     * @return \obiba\mica\TimestampsDto
     */
    public function setCreated( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lastUpdate> has a value
     *
     * @return boolean
     */
    public function hasLastUpdate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lastUpdate> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function clearLastUpdate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lastUpdate> value
     *
     * @return string
     */
    public function getLastUpdate(){
      return $this->_get(2);
    }
    
    /**
     * Set <lastUpdate> value
     *
     * @param string $value
     * @return \obiba\mica\TimestampsDto
     */
    public function setLastUpdate( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class CountryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $iso = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.CountryDto');

      // REQUIRED STRING iso = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "iso";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <iso> has a value
     *
     * @return boolean
     */
    public function hasIso(){
      return $this->_has(1);
    }
    
    /**
     * Clear <iso> value
     *
     * @return \obiba\mica\CountryDto
     */
    public function clearIso(){
      return $this->_clear(1);
    }
    
    /**
     * Get <iso> value
     *
     * @return string
     */
    public function getIso(){
      return $this->_get(1);
    }
    
    /**
     * Set <iso> value
     *
     * @param string $value
     * @return \obiba\mica\CountryDto
     */
    public function setIso( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\CountryDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\CountryDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\CountryDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class TargetNumberDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $noLimit = null;
    
    /**  @var int */
    public $number = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TargetNumberDto');

      // OPTIONAL BOOL noLimit = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "noLimit";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <noLimit> has a value
     *
     * @return boolean
     */
    public function hasNoLimit(){
      return $this->_has(1);
    }
    
    /**
     * Clear <noLimit> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function clearNoLimit(){
      return $this->_clear(1);
    }
    
    /**
     * Get <noLimit> value
     *
     * @return boolean
     */
    public function getNoLimit(){
      return $this->_get(1);
    }
    
    /**
     * Set <noLimit> value
     *
     * @param boolean $value
     * @return \obiba\mica\TargetNumberDto
     */
    public function setNoLimit( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \obiba\mica\TargetNumberDto
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class LocalizedStringDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $lang = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.LocalizedStringDto');

      // REQUIRED STRING lang = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lang";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lang> has a value
     *
     * @return boolean
     */
    public function hasLang(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lang> value
     *
     * @return \obiba\mica\LocalizedStringDto
     */
    public function clearLang(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lang> value
     *
     * @return string
     */
    public function getLang(){
      return $this->_get(1);
    }
    
    /**
     * Set <lang> value
     *
     * @param string $value
     * @return \obiba\mica\LocalizedStringDto
     */
    public function setLang( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \obiba\mica\LocalizedStringDto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \obiba\mica\LocalizedStringDto
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class LocalizedStringDtos extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $localizedStrings = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.LocalizedStringDtos');

      // REPEATED MESSAGE localizedStrings = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "localizedStrings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <localizedStrings> has a value
     *
     * @return boolean
     */
    public function hasLocalizedStrings(){
      return $this->_has(1);
    }
    
    /**
     * Clear <localizedStrings> value
     *
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function clearLocalizedStrings(){
      return $this->_clear(1);
    }
    
    /**
     * Get <localizedStrings> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getLocalizedStrings($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <localizedStrings> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function setLocalizedStrings(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <localizedStrings>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getLocalizedStringsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <localizedStrings>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function addLocalizedStrings(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(1, $value);
    }
  }
}

namespace obiba\mica {

  class MembershipsDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $role = null;
    
    /**  @var \obiba\mica\PersonDto[]  */
    public $members = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.MembershipsDto');

      // REQUIRED STRING role = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "role";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE members = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "members";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PersonDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <role> has a value
     *
     * @return boolean
     */
    public function hasRole(){
      return $this->_has(1);
    }
    
    /**
     * Clear <role> value
     *
     * @return \obiba\mica\MembershipsDto
     */
    public function clearRole(){
      return $this->_clear(1);
    }
    
    /**
     * Get <role> value
     *
     * @return string
     */
    public function getRole(){
      return $this->_get(1);
    }
    
    /**
     * Set <role> value
     *
     * @param string $value
     * @return \obiba\mica\MembershipsDto
     */
    public function setRole( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <members> has a value
     *
     * @return boolean
     */
    public function hasMembers(){
      return $this->_has(2);
    }
    
    /**
     * Clear <members> value
     *
     * @return \obiba\mica\MembershipsDto
     */
    public function clearMembers(){
      return $this->_clear(2);
    }
    
    /**
     * Get <members> value
     *
     * @param int $idx
     * @return \obiba\mica\PersonDto
     */
    public function getMembers($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <members> value
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\MembershipsDto
     */
    public function setMembers(\obiba\mica\PersonDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <members>
     *
     * @return \obiba\mica\PersonDto[]
     */
    public function getMembersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <members>
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\MembershipsDto
     */
    public function addMembers(\obiba\mica\PersonDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica\PersonDto {

  class InstitutionDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $department = array();
    
    /**  @var \obiba\mica\AddressDto */
    public $address = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.PersonDto.InstitutionDto');

      // REPEATED MESSAGE name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE department = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "department";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE address = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "address";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AddressDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <department> has a value
     *
     * @return boolean
     */
    public function hasDepartment(){
      return $this->_has(2);
    }
    
    /**
     * Clear <department> value
     *
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function clearDepartment(){
      return $this->_clear(2);
    }
    
    /**
     * Get <department> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDepartment($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <department> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function setDepartment(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <department>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDepartmentList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <department>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function addDepartment(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <address> has a value
     *
     * @return boolean
     */
    public function hasAddress(){
      return $this->_has(3);
    }
    
    /**
     * Clear <address> value
     *
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function clearAddress(){
      return $this->_clear(3);
    }
    
    /**
     * Get <address> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function getAddress(){
      return $this->_get(3);
    }
    
    /**
     * Set <address> value
     *
     * @param \obiba\mica\AddressDto $value
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function setAddress(\obiba\mica\AddressDto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica\PersonDto {

  class MembershipDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $role = null;
    
    /**  @var string */
    public $parentId = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $parentAcronym = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $parentName = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.PersonDto.MembershipDto');

      // REQUIRED STRING role = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "role";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING parentId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parentId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE parentAcronym = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "parentAcronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE parentName = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "parentName";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <role> has a value
     *
     * @return boolean
     */
    public function hasRole(){
      return $this->_has(1);
    }
    
    /**
     * Clear <role> value
     *
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function clearRole(){
      return $this->_clear(1);
    }
    
    /**
     * Get <role> value
     *
     * @return string
     */
    public function getRole(){
      return $this->_get(1);
    }
    
    /**
     * Set <role> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function setRole( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parentId> has a value
     *
     * @return boolean
     */
    public function hasParentId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parentId> value
     *
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function clearParentId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parentId> value
     *
     * @return string
     */
    public function getParentId(){
      return $this->_get(2);
    }
    
    /**
     * Set <parentId> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function setParentId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <parentAcronym> has a value
     *
     * @return boolean
     */
    public function hasParentAcronym(){
      return $this->_has(3);
    }
    
    /**
     * Clear <parentAcronym> value
     *
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function clearParentAcronym(){
      return $this->_clear(3);
    }
    
    /**
     * Get <parentAcronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getParentAcronym($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <parentAcronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function setParentAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <parentAcronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getParentAcronymList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <parentAcronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function addParentAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <parentName> has a value
     *
     * @return boolean
     */
    public function hasParentName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <parentName> value
     *
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function clearParentName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <parentName> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getParentName($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <parentName> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function setParentName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <parentName>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getParentNameList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <parentName>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function addParentName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace obiba\mica {

  class PersonDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $firstName = null;
    
    /**  @var string */
    public $lastName = null;
    
    /**  @var string */
    public $academicLevel = null;
    
    /**  @var string */
    public $email = null;
    
    /**  @var string */
    public $phone = null;
    
    /**  @var boolean */
    public $dataAccessCommitteeMember = null;
    
    /**  @var \obiba\mica\PersonDto\InstitutionDto */
    public $institution = null;
    
    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\PersonDto\MembershipDto[]  */
    public $studyMemberships = array();
    
    /**  @var \obiba\mica\PersonDto\MembershipDto[]  */
    public $networkMemberships = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.PersonDto');

      // OPTIONAL STRING title = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING firstName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "firstName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING lastName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lastName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING academicLevel = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "academicLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING email = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "email";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING phone = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "phone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL dataAccessCommitteeMember = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "dataAccessCommitteeMember";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE institution = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "institution";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\PersonDto\InstitutionDto';
      $descriptor->addField($f);

      // OPTIONAL STRING id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE studyMemberships = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "studyMemberships";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PersonDto\MembershipDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE networkMemberships = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "networkMemberships";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PersonDto\MembershipDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(1);
    }
    
    /**
     * Clear <title> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearTitle(){
      return $this->_clear(1);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(1);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto
     */
    public function setTitle( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <firstName> has a value
     *
     * @return boolean
     */
    public function hasFirstName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <firstName> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearFirstName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <firstName> value
     *
     * @return string
     */
    public function getFirstName(){
      return $this->_get(2);
    }
    
    /**
     * Set <firstName> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto
     */
    public function setFirstName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lastName> has a value
     *
     * @return boolean
     */
    public function hasLastName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lastName> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearLastName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lastName> value
     *
     * @return string
     */
    public function getLastName(){
      return $this->_get(3);
    }
    
    /**
     * Set <lastName> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto
     */
    public function setLastName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <academicLevel> has a value
     *
     * @return boolean
     */
    public function hasAcademicLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <academicLevel> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearAcademicLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <academicLevel> value
     *
     * @return string
     */
    public function getAcademicLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <academicLevel> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto
     */
    public function setAcademicLevel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <email> has a value
     *
     * @return boolean
     */
    public function hasEmail(){
      return $this->_has(5);
    }
    
    /**
     * Clear <email> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearEmail(){
      return $this->_clear(5);
    }
    
    /**
     * Get <email> value
     *
     * @return string
     */
    public function getEmail(){
      return $this->_get(5);
    }
    
    /**
     * Set <email> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto
     */
    public function setEmail( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <phone> has a value
     *
     * @return boolean
     */
    public function hasPhone(){
      return $this->_has(6);
    }
    
    /**
     * Clear <phone> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearPhone(){
      return $this->_clear(6);
    }
    
    /**
     * Get <phone> value
     *
     * @return string
     */
    public function getPhone(){
      return $this->_get(6);
    }
    
    /**
     * Set <phone> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto
     */
    public function setPhone( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <dataAccessCommitteeMember> has a value
     *
     * @return boolean
     */
    public function hasDataAccessCommitteeMember(){
      return $this->_has(7);
    }
    
    /**
     * Clear <dataAccessCommitteeMember> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearDataAccessCommitteeMember(){
      return $this->_clear(7);
    }
    
    /**
     * Get <dataAccessCommitteeMember> value
     *
     * @return boolean
     */
    public function getDataAccessCommitteeMember(){
      return $this->_get(7);
    }
    
    /**
     * Set <dataAccessCommitteeMember> value
     *
     * @param boolean $value
     * @return \obiba\mica\PersonDto
     */
    public function setDataAccessCommitteeMember( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <institution> has a value
     *
     * @return boolean
     */
    public function hasInstitution(){
      return $this->_has(8);
    }
    
    /**
     * Clear <institution> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearInstitution(){
      return $this->_clear(8);
    }
    
    /**
     * Get <institution> value
     *
     * @return \obiba\mica\PersonDto\InstitutionDto
     */
    public function getInstitution(){
      return $this->_get(8);
    }
    
    /**
     * Set <institution> value
     *
     * @param \obiba\mica\PersonDto\InstitutionDto $value
     * @return \obiba\mica\PersonDto
     */
    public function setInstitution(\obiba\mica\PersonDto\InstitutionDto $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(9);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearId(){
      return $this->_clear(9);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(9);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\PersonDto
     */
    public function setId( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <studyMemberships> has a value
     *
     * @return boolean
     */
    public function hasStudyMemberships(){
      return $this->_has(10);
    }
    
    /**
     * Clear <studyMemberships> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearStudyMemberships(){
      return $this->_clear(10);
    }
    
    /**
     * Get <studyMemberships> value
     *
     * @param int $idx
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function getStudyMemberships($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <studyMemberships> value
     *
     * @param \obiba\mica\PersonDto\MembershipDto $value
     * @return \obiba\mica\PersonDto
     */
    public function setStudyMemberships(\obiba\mica\PersonDto\MembershipDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <studyMemberships>
     *
     * @return \obiba\mica\PersonDto\MembershipDto[]
     */
    public function getStudyMembershipsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <studyMemberships>
     *
     * @param \obiba\mica\PersonDto\MembershipDto $value
     * @return \obiba\mica\PersonDto
     */
    public function addStudyMemberships(\obiba\mica\PersonDto\MembershipDto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <networkMemberships> has a value
     *
     * @return boolean
     */
    public function hasNetworkMemberships(){
      return $this->_has(11);
    }
    
    /**
     * Clear <networkMemberships> value
     *
     * @return \obiba\mica\PersonDto
     */
    public function clearNetworkMemberships(){
      return $this->_clear(11);
    }
    
    /**
     * Get <networkMemberships> value
     *
     * @param int $idx
     * @return \obiba\mica\PersonDto\MembershipDto
     */
    public function getNetworkMemberships($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <networkMemberships> value
     *
     * @param \obiba\mica\PersonDto\MembershipDto $value
     * @return \obiba\mica\PersonDto
     */
    public function setNetworkMemberships(\obiba\mica\PersonDto\MembershipDto $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <networkMemberships>
     *
     * @return \obiba\mica\PersonDto\MembershipDto[]
     */
    public function getNetworkMembershipsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <networkMemberships>
     *
     * @param \obiba\mica\PersonDto\MembershipDto $value
     * @return \obiba\mica\PersonDto
     */
    public function addNetworkMemberships(\obiba\mica\PersonDto\MembershipDto $value){
     return $this->_add(11, $value);
    }
  }
}

namespace obiba\mica {

  class PersonsDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $from = null;
    
    /**  @var int */
    public $limit = null;
    
    /**  @var \obiba\mica\PersonDto[]  */
    public $persons = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.PersonsDto');

      // REQUIRED INT32 total = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 from = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 limit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE persons = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "persons";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\PersonDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <total> value
     *
     * @return \obiba\mica\PersonsDto
     */
    public function clearTotal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(1);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \obiba\mica\PersonsDto
     */
    public function setTotal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(2);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\PersonsDto
     */
    public function clearFrom(){
      return $this->_clear(2);
    }
    
    /**
     * Get <from> value
     *
     * @return int
     */
    public function getFrom(){
      return $this->_get(2);
    }
    
    /**
     * Set <from> value
     *
     * @param int $value
     * @return \obiba\mica\PersonsDto
     */
    public function setFrom( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <limit> value
     *
     * @return \obiba\mica\PersonsDto
     */
    public function clearLimit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(3);
    }
    
    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \obiba\mica\PersonsDto
     */
    public function setLimit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <persons> has a value
     *
     * @return boolean
     */
    public function hasPersons(){
      return $this->_has(4);
    }
    
    /**
     * Clear <persons> value
     *
     * @return \obiba\mica\PersonsDto
     */
    public function clearPersons(){
      return $this->_clear(4);
    }
    
    /**
     * Get <persons> value
     *
     * @param int $idx
     * @return \obiba\mica\PersonDto
     */
    public function getPersons($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <persons> value
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\PersonsDto
     */
    public function setPersons(\obiba\mica\PersonDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <persons>
     *
     * @return \obiba\mica\PersonDto[]
     */
    public function getPersonsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <persons>
     *
     * @param \obiba\mica\PersonDto $value
     * @return \obiba\mica\PersonsDto
     */
    public function addPersons(\obiba\mica\PersonDto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace obiba\mica {

  class AuthorizationDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $authorized = null;
    
    /**  @var string */
    public $authorizer = null;
    
    /**  @var string */
    public $date = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AuthorizationDto');

      // OPTIONAL BOOL authorized = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "authorized";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING authorizer = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "authorizer";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING date = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "date";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <authorized> has a value
     *
     * @return boolean
     */
    public function hasAuthorized(){
      return $this->_has(1);
    }
    
    /**
     * Clear <authorized> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function clearAuthorized(){
      return $this->_clear(1);
    }
    
    /**
     * Get <authorized> value
     *
     * @return boolean
     */
    public function getAuthorized(){
      return $this->_get(1);
    }
    
    /**
     * Set <authorized> value
     *
     * @param boolean $value
     * @return \obiba\mica\AuthorizationDto
     */
    public function setAuthorized( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <authorizer> has a value
     *
     * @return boolean
     */
    public function hasAuthorizer(){
      return $this->_has(2);
    }
    
    /**
     * Clear <authorizer> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function clearAuthorizer(){
      return $this->_clear(2);
    }
    
    /**
     * Get <authorizer> value
     *
     * @return string
     */
    public function getAuthorizer(){
      return $this->_get(2);
    }
    
    /**
     * Set <authorizer> value
     *
     * @param string $value
     * @return \obiba\mica\AuthorizationDto
     */
    public function setAuthorizer( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <date> has a value
     *
     * @return boolean
     */
    public function hasDate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <date> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function clearDate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <date> value
     *
     * @return string
     */
    public function getDate(){
      return $this->_get(3);
    }
    
    /**
     * Set <date> value
     *
     * @param string $value
     * @return \obiba\mica\AuthorizationDto
     */
    public function setDate( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class AddressDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $street = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $city = array();
    
    /**  @var string */
    public $zip = null;
    
    /**  @var string */
    public $state = null;
    
    /**  @var \obiba\mica\CountryDto */
    public $country = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AddressDto');

      // REPEATED MESSAGE street = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "street";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE city = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "city";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING zip = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "zip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING state = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "country";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\CountryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <street> has a value
     *
     * @return boolean
     */
    public function hasStreet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <street> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearStreet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <street> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getStreet($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <street> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AddressDto
     */
    public function setStreet(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <street>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getStreetList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <street>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AddressDto
     */
    public function addStreet(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <city> has a value
     *
     * @return boolean
     */
    public function hasCity(){
      return $this->_has(2);
    }
    
    /**
     * Clear <city> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearCity(){
      return $this->_clear(2);
    }
    
    /**
     * Get <city> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getCity($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <city> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AddressDto
     */
    public function setCity(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <city>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getCityList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <city>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AddressDto
     */
    public function addCity(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <zip> has a value
     *
     * @return boolean
     */
    public function hasZip(){
      return $this->_has(3);
    }
    
    /**
     * Clear <zip> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearZip(){
      return $this->_clear(3);
    }
    
    /**
     * Get <zip> value
     *
     * @return string
     */
    public function getZip(){
      return $this->_get(3);
    }
    
    /**
     * Set <zip> value
     *
     * @param string $value
     * @return \obiba\mica\AddressDto
     */
    public function setZip( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(4);
    }
    
    /**
     * Clear <state> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearState(){
      return $this->_clear(4);
    }
    
    /**
     * Get <state> value
     *
     * @return string
     */
    public function getState(){
      return $this->_get(4);
    }
    
    /**
     * Set <state> value
     *
     * @param string $value
     * @return \obiba\mica\AddressDto
     */
    public function setState( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <country> has a value
     *
     * @return boolean
     */
    public function hasCountry(){
      return $this->_has(5);
    }
    
    /**
     * Clear <country> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearCountry(){
      return $this->_clear(5);
    }
    
    /**
     * Get <country> value
     *
     * @return \obiba\mica\CountryDto
     */
    public function getCountry(){
      return $this->_get(5);
    }
    
    /**
     * Set <country> value
     *
     * @param \obiba\mica\CountryDto $value
     * @return \obiba\mica\AddressDto
     */
    public function setCountry(\obiba\mica\CountryDto $value){
      return $this->_set(5, $value);
    }
  }
}

namespace obiba\mica {

  class AttachmentDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $fileName = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var string */
    public $lang = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $md5 = null;
    
    /**  @var boolean */
    public $justUploaded = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    
    /**  @var string */
    public $path = null;
    
    /**  @var string */
    public $lastModifiedBy = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AttachmentDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING fileName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fileName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING lang = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "lang";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING md5 = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "md5";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL justUploaded = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "justUploaded";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      // OPTIONAL STRING path = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING lastModifiedBy = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "lastModifiedBy";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <fileName> has a value
     *
     * @return boolean
     */
    public function hasFileName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fileName> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearFileName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fileName> value
     *
     * @return string
     */
    public function getFileName(){
      return $this->_get(2);
    }
    
    /**
     * Set <fileName> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setFileName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(4);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearDescription(){
      return $this->_clear(4);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AttachmentDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <lang> has a value
     *
     * @return boolean
     */
    public function hasLang(){
      return $this->_has(5);
    }
    
    /**
     * Clear <lang> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearLang(){
      return $this->_clear(5);
    }
    
    /**
     * Get <lang> value
     *
     * @return string
     */
    public function getLang(){
      return $this->_get(5);
    }
    
    /**
     * Set <lang> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setLang( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(6);
    }
    
    /**
     * Clear <size> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearSize(){
      return $this->_clear(6);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(6);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setSize( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <md5> has a value
     *
     * @return boolean
     */
    public function hasMd5(){
      return $this->_has(7);
    }
    
    /**
     * Clear <md5> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearMd5(){
      return $this->_clear(7);
    }
    
    /**
     * Get <md5> value
     *
     * @return string
     */
    public function getMd5(){
      return $this->_get(7);
    }
    
    /**
     * Set <md5> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setMd5( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <justUploaded> has a value
     *
     * @return boolean
     */
    public function hasJustUploaded(){
      return $this->_has(8);
    }
    
    /**
     * Clear <justUploaded> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearJustUploaded(){
      return $this->_clear(8);
    }
    
    /**
     * Get <justUploaded> value
     *
     * @return boolean
     */
    public function getJustUploaded(){
      return $this->_get(8);
    }
    
    /**
     * Set <justUploaded> value
     *
     * @param boolean $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setJustUploaded( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(9);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearTimestamps(){
      return $this->_clear(9);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(9);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(10);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearAttributes(){
      return $this->_clear(10);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\AttachmentDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(11);
    }
    
    /**
     * Clear <path> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearPath(){
      return $this->_clear(11);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(11);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setPath( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <lastModifiedBy> has a value
     *
     * @return boolean
     */
    public function hasLastModifiedBy(){
      return $this->_has(12);
    }
    
    /**
     * Clear <lastModifiedBy> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearLastModifiedBy(){
      return $this->_clear(12);
    }
    
    /**
     * Get <lastModifiedBy> value
     *
     * @return string
     */
    public function getLastModifiedBy(){
      return $this->_get(12);
    }
    
    /**
     * Set <lastModifiedBy> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setLastModifiedBy( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace obiba\mica {

  class TempFileDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $md5 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TempFileDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING md5 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "md5";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\TempFileDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\TempFileDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\TempFileDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\TempFileDto
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <size> value
     *
     * @return \obiba\mica\TempFileDto
     */
    public function clearSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \obiba\mica\TempFileDto
     */
    public function setSize( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <md5> has a value
     *
     * @return boolean
     */
    public function hasMd5(){
      return $this->_has(4);
    }
    
    /**
     * Clear <md5> value
     *
     * @return \obiba\mica\TempFileDto
     */
    public function clearMd5(){
      return $this->_clear(4);
    }
    
    /**
     * Get <md5> value
     *
     * @return string
     */
    public function getMd5(){
      return $this->_get(4);
    }
    
    /**
     * Set <md5> value
     *
     * @param string $value
     * @return \obiba\mica\TempFileDto
     */
    public function setMd5( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace obiba\mica {

  class MicaConfigDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string[]  */
    public $languages = array();
    
    /**  @var string */
    public $defaultCharSet = null;
    
    /**  @var string */
    public $publicUrl = null;
    
    /**  @var string */
    public $opal = null;
    
    /**  @var string */
    public $version = null;
    
    /**  @var int */
    public $privacyThreshold = null;
    
    /**  @var string[]  */
    public $roles = array();
    
    /**  @var boolean */
    public $openAccess = true;
    
    /**  @var boolean */
    public $isFsNotificationsEnabled = null;
    
    /**  @var string */
    public $fsNotificationsSubject = null;
    
    /**  @var boolean */
    public $isCommentNotificationsEnabled = null;
    
    /**  @var string */
    public $commentNotificationsSubject = null;
    
    /**  @var boolean */
    public $isStudyNotificationsEnabled = null;
    
    /**  @var string */
    public $studyNotificationsSubject = null;
    
    /**  @var boolean */
    public $isNetworkNotificationsEnabled = null;
    
    /**  @var string */
    public $networkNotificationsSubject = null;
    
    /**  @var boolean */
    public $isStudyDatasetNotificationsEnabled = null;
    
    /**  @var string */
    public $studyDatasetNotificationsSubject = null;
    
    /**  @var boolean */
    public $isHarmonizationDatasetNotificationsEnabled = null;
    
    /**  @var string */
    public $harmonizationDatasetNotificationsSubject = null;
    
    /**  @var boolean */
    public $isSingleStudyEnabled = null;
    
    /**  @var boolean */
    public $isNetworkEnabled = null;
    
    /**  @var boolean */
    public $isSingleNetworkEnabled = null;
    
    /**  @var boolean */
    public $isStudyDatasetEnabled = null;
    
    /**  @var boolean */
    public $isHarmonizationDatasetEnabled = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.MicaConfigDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING languages = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "languages";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING defaultCharSet = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "defaultCharSet";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING publicUrl = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "publicUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING opal = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "opal";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING version = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 privacyThreshold = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "privacyThreshold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING roles = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "roles";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED BOOL openAccess = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "openAccess";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = true;
      $descriptor->addField($f);

      // OPTIONAL BOOL isFsNotificationsEnabled = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "isFsNotificationsEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING fsNotificationsSubject = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "fsNotificationsSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isCommentNotificationsEnabled = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "isCommentNotificationsEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING commentNotificationsSubject = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "commentNotificationsSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isStudyNotificationsEnabled = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "isStudyNotificationsEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING studyNotificationsSubject = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "studyNotificationsSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isNetworkNotificationsEnabled = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "isNetworkNotificationsEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING networkNotificationsSubject = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "networkNotificationsSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isStudyDatasetNotificationsEnabled = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "isStudyDatasetNotificationsEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING studyDatasetNotificationsSubject = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "studyDatasetNotificationsSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isHarmonizationDatasetNotificationsEnabled = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "isHarmonizationDatasetNotificationsEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING harmonizationDatasetNotificationsSubject = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "harmonizationDatasetNotificationsSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isSingleStudyEnabled = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "isSingleStudyEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isNetworkEnabled = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "isNetworkEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isSingleNetworkEnabled = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "isSingleNetworkEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isStudyDatasetEnabled = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "isStudyDatasetEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isHarmonizationDatasetEnabled = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "isHarmonizationDatasetEnabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <languages> has a value
     *
     * @return boolean
     */
    public function hasLanguages(){
      return $this->_has(2);
    }
    
    /**
     * Clear <languages> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearLanguages(){
      return $this->_clear(2);
    }
    
    /**
     * Get <languages> value
     *
     * @param int $idx
     * @return string
     */
    public function getLanguages($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <languages> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setLanguages( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <languages>
     *
     * @return string[]
     */
    public function getLanguagesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <languages>
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function addLanguages( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <defaultCharSet> has a value
     *
     * @return boolean
     */
    public function hasDefaultCharSet(){
      return $this->_has(3);
    }
    
    /**
     * Clear <defaultCharSet> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearDefaultCharSet(){
      return $this->_clear(3);
    }
    
    /**
     * Get <defaultCharSet> value
     *
     * @return string
     */
    public function getDefaultCharSet(){
      return $this->_get(3);
    }
    
    /**
     * Set <defaultCharSet> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setDefaultCharSet( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <publicUrl> has a value
     *
     * @return boolean
     */
    public function hasPublicUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <publicUrl> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearPublicUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <publicUrl> value
     *
     * @return string
     */
    public function getPublicUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <publicUrl> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setPublicUrl( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <opal> has a value
     *
     * @return boolean
     */
    public function hasOpal(){
      return $this->_has(5);
    }
    
    /**
     * Clear <opal> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearOpal(){
      return $this->_clear(5);
    }
    
    /**
     * Get <opal> value
     *
     * @return string
     */
    public function getOpal(){
      return $this->_get(5);
    }
    
    /**
     * Set <opal> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setOpal( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(6);
    }
    
    /**
     * Clear <version> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearVersion(){
      return $this->_clear(6);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(6);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setVersion( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <privacyThreshold> has a value
     *
     * @return boolean
     */
    public function hasPrivacyThreshold(){
      return $this->_has(7);
    }
    
    /**
     * Clear <privacyThreshold> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearPrivacyThreshold(){
      return $this->_clear(7);
    }
    
    /**
     * Get <privacyThreshold> value
     *
     * @return int
     */
    public function getPrivacyThreshold(){
      return $this->_get(7);
    }
    
    /**
     * Set <privacyThreshold> value
     *
     * @param int $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setPrivacyThreshold( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <roles> has a value
     *
     * @return boolean
     */
    public function hasRoles(){
      return $this->_has(8);
    }
    
    /**
     * Clear <roles> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearRoles(){
      return $this->_clear(8);
    }
    
    /**
     * Get <roles> value
     *
     * @param int $idx
     * @return string
     */
    public function getRoles($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <roles> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setRoles( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <roles>
     *
     * @return string[]
     */
    public function getRolesList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <roles>
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function addRoles( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <openAccess> has a value
     *
     * @return boolean
     */
    public function hasOpenAccess(){
      return $this->_has(9);
    }
    
    /**
     * Clear <openAccess> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearOpenAccess(){
      return $this->_clear(9);
    }
    
    /**
     * Get <openAccess> value
     *
     * @return boolean
     */
    public function getOpenAccess(){
      return $this->_get(9);
    }
    
    /**
     * Set <openAccess> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setOpenAccess( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <isFsNotificationsEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsFsNotificationsEnabled(){
      return $this->_has(10);
    }
    
    /**
     * Clear <isFsNotificationsEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsFsNotificationsEnabled(){
      return $this->_clear(10);
    }
    
    /**
     * Get <isFsNotificationsEnabled> value
     *
     * @return boolean
     */
    public function getIsFsNotificationsEnabled(){
      return $this->_get(10);
    }
    
    /**
     * Set <isFsNotificationsEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsFsNotificationsEnabled( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <fsNotificationsSubject> has a value
     *
     * @return boolean
     */
    public function hasFsNotificationsSubject(){
      return $this->_has(11);
    }
    
    /**
     * Clear <fsNotificationsSubject> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearFsNotificationsSubject(){
      return $this->_clear(11);
    }
    
    /**
     * Get <fsNotificationsSubject> value
     *
     * @return string
     */
    public function getFsNotificationsSubject(){
      return $this->_get(11);
    }
    
    /**
     * Set <fsNotificationsSubject> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setFsNotificationsSubject( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <isCommentNotificationsEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsCommentNotificationsEnabled(){
      return $this->_has(12);
    }
    
    /**
     * Clear <isCommentNotificationsEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsCommentNotificationsEnabled(){
      return $this->_clear(12);
    }
    
    /**
     * Get <isCommentNotificationsEnabled> value
     *
     * @return boolean
     */
    public function getIsCommentNotificationsEnabled(){
      return $this->_get(12);
    }
    
    /**
     * Set <isCommentNotificationsEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsCommentNotificationsEnabled( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <commentNotificationsSubject> has a value
     *
     * @return boolean
     */
    public function hasCommentNotificationsSubject(){
      return $this->_has(13);
    }
    
    /**
     * Clear <commentNotificationsSubject> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearCommentNotificationsSubject(){
      return $this->_clear(13);
    }
    
    /**
     * Get <commentNotificationsSubject> value
     *
     * @return string
     */
    public function getCommentNotificationsSubject(){
      return $this->_get(13);
    }
    
    /**
     * Set <commentNotificationsSubject> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setCommentNotificationsSubject( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <isStudyNotificationsEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsStudyNotificationsEnabled(){
      return $this->_has(14);
    }
    
    /**
     * Clear <isStudyNotificationsEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsStudyNotificationsEnabled(){
      return $this->_clear(14);
    }
    
    /**
     * Get <isStudyNotificationsEnabled> value
     *
     * @return boolean
     */
    public function getIsStudyNotificationsEnabled(){
      return $this->_get(14);
    }
    
    /**
     * Set <isStudyNotificationsEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsStudyNotificationsEnabled( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <studyNotificationsSubject> has a value
     *
     * @return boolean
     */
    public function hasStudyNotificationsSubject(){
      return $this->_has(15);
    }
    
    /**
     * Clear <studyNotificationsSubject> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearStudyNotificationsSubject(){
      return $this->_clear(15);
    }
    
    /**
     * Get <studyNotificationsSubject> value
     *
     * @return string
     */
    public function getStudyNotificationsSubject(){
      return $this->_get(15);
    }
    
    /**
     * Set <studyNotificationsSubject> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setStudyNotificationsSubject( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <isNetworkNotificationsEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsNetworkNotificationsEnabled(){
      return $this->_has(16);
    }
    
    /**
     * Clear <isNetworkNotificationsEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsNetworkNotificationsEnabled(){
      return $this->_clear(16);
    }
    
    /**
     * Get <isNetworkNotificationsEnabled> value
     *
     * @return boolean
     */
    public function getIsNetworkNotificationsEnabled(){
      return $this->_get(16);
    }
    
    /**
     * Set <isNetworkNotificationsEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsNetworkNotificationsEnabled( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <networkNotificationsSubject> has a value
     *
     * @return boolean
     */
    public function hasNetworkNotificationsSubject(){
      return $this->_has(17);
    }
    
    /**
     * Clear <networkNotificationsSubject> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearNetworkNotificationsSubject(){
      return $this->_clear(17);
    }
    
    /**
     * Get <networkNotificationsSubject> value
     *
     * @return string
     */
    public function getNetworkNotificationsSubject(){
      return $this->_get(17);
    }
    
    /**
     * Set <networkNotificationsSubject> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setNetworkNotificationsSubject( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <isStudyDatasetNotificationsEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsStudyDatasetNotificationsEnabled(){
      return $this->_has(18);
    }
    
    /**
     * Clear <isStudyDatasetNotificationsEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsStudyDatasetNotificationsEnabled(){
      return $this->_clear(18);
    }
    
    /**
     * Get <isStudyDatasetNotificationsEnabled> value
     *
     * @return boolean
     */
    public function getIsStudyDatasetNotificationsEnabled(){
      return $this->_get(18);
    }
    
    /**
     * Set <isStudyDatasetNotificationsEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsStudyDatasetNotificationsEnabled( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <studyDatasetNotificationsSubject> has a value
     *
     * @return boolean
     */
    public function hasStudyDatasetNotificationsSubject(){
      return $this->_has(19);
    }
    
    /**
     * Clear <studyDatasetNotificationsSubject> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearStudyDatasetNotificationsSubject(){
      return $this->_clear(19);
    }
    
    /**
     * Get <studyDatasetNotificationsSubject> value
     *
     * @return string
     */
    public function getStudyDatasetNotificationsSubject(){
      return $this->_get(19);
    }
    
    /**
     * Set <studyDatasetNotificationsSubject> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setStudyDatasetNotificationsSubject( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <isHarmonizationDatasetNotificationsEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsHarmonizationDatasetNotificationsEnabled(){
      return $this->_has(20);
    }
    
    /**
     * Clear <isHarmonizationDatasetNotificationsEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsHarmonizationDatasetNotificationsEnabled(){
      return $this->_clear(20);
    }
    
    /**
     * Get <isHarmonizationDatasetNotificationsEnabled> value
     *
     * @return boolean
     */
    public function getIsHarmonizationDatasetNotificationsEnabled(){
      return $this->_get(20);
    }
    
    /**
     * Set <isHarmonizationDatasetNotificationsEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsHarmonizationDatasetNotificationsEnabled( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <harmonizationDatasetNotificationsSubject> has a value
     *
     * @return boolean
     */
    public function hasHarmonizationDatasetNotificationsSubject(){
      return $this->_has(21);
    }
    
    /**
     * Clear <harmonizationDatasetNotificationsSubject> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearHarmonizationDatasetNotificationsSubject(){
      return $this->_clear(21);
    }
    
    /**
     * Get <harmonizationDatasetNotificationsSubject> value
     *
     * @return string
     */
    public function getHarmonizationDatasetNotificationsSubject(){
      return $this->_get(21);
    }
    
    /**
     * Set <harmonizationDatasetNotificationsSubject> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setHarmonizationDatasetNotificationsSubject( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <isSingleStudyEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsSingleStudyEnabled(){
      return $this->_has(22);
    }
    
    /**
     * Clear <isSingleStudyEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsSingleStudyEnabled(){
      return $this->_clear(22);
    }
    
    /**
     * Get <isSingleStudyEnabled> value
     *
     * @return boolean
     */
    public function getIsSingleStudyEnabled(){
      return $this->_get(22);
    }
    
    /**
     * Set <isSingleStudyEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsSingleStudyEnabled( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <isNetworkEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsNetworkEnabled(){
      return $this->_has(23);
    }
    
    /**
     * Clear <isNetworkEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsNetworkEnabled(){
      return $this->_clear(23);
    }
    
    /**
     * Get <isNetworkEnabled> value
     *
     * @return boolean
     */
    public function getIsNetworkEnabled(){
      return $this->_get(23);
    }
    
    /**
     * Set <isNetworkEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsNetworkEnabled( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <isSingleNetworkEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsSingleNetworkEnabled(){
      return $this->_has(24);
    }
    
    /**
     * Clear <isSingleNetworkEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsSingleNetworkEnabled(){
      return $this->_clear(24);
    }
    
    /**
     * Get <isSingleNetworkEnabled> value
     *
     * @return boolean
     */
    public function getIsSingleNetworkEnabled(){
      return $this->_get(24);
    }
    
    /**
     * Set <isSingleNetworkEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsSingleNetworkEnabled( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <isStudyDatasetEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsStudyDatasetEnabled(){
      return $this->_has(25);
    }
    
    /**
     * Clear <isStudyDatasetEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsStudyDatasetEnabled(){
      return $this->_clear(25);
    }
    
    /**
     * Get <isStudyDatasetEnabled> value
     *
     * @return boolean
     */
    public function getIsStudyDatasetEnabled(){
      return $this->_get(25);
    }
    
    /**
     * Set <isStudyDatasetEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsStudyDatasetEnabled( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <isHarmonizationDatasetEnabled> has a value
     *
     * @return boolean
     */
    public function hasIsHarmonizationDatasetEnabled(){
      return $this->_has(26);
    }
    
    /**
     * Clear <isHarmonizationDatasetEnabled> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearIsHarmonizationDatasetEnabled(){
      return $this->_clear(26);
    }
    
    /**
     * Get <isHarmonizationDatasetEnabled> value
     *
     * @return boolean
     */
    public function getIsHarmonizationDatasetEnabled(){
      return $this->_get(26);
    }
    
    /**
     * Set <isHarmonizationDatasetEnabled> value
     *
     * @param boolean $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setIsHarmonizationDatasetEnabled( $value){
      return $this->_set(26, $value);
    }
  }
}

namespace obiba\mica {

  class AggregationsConfigDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\AggregationInfoDto[]  */
    public $study = array();
    
    /**  @var \obiba\mica\AggregationInfoDto[]  */
    public $variable = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AggregationsConfigDto');

      // REPEATED MESSAGE study = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "study";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AggregationInfoDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE variable = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variable";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AggregationInfoDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <study> has a value
     *
     * @return boolean
     */
    public function hasStudy(){
      return $this->_has(1);
    }
    
    /**
     * Clear <study> value
     *
     * @return \obiba\mica\AggregationsConfigDto
     */
    public function clearStudy(){
      return $this->_clear(1);
    }
    
    /**
     * Get <study> value
     *
     * @param int $idx
     * @return \obiba\mica\AggregationInfoDto
     */
    public function getStudy($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <study> value
     *
     * @param \obiba\mica\AggregationInfoDto $value
     * @return \obiba\mica\AggregationsConfigDto
     */
    public function setStudy(\obiba\mica\AggregationInfoDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <study>
     *
     * @return \obiba\mica\AggregationInfoDto[]
     */
    public function getStudyList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <study>
     *
     * @param \obiba\mica\AggregationInfoDto $value
     * @return \obiba\mica\AggregationsConfigDto
     */
    public function addStudy(\obiba\mica\AggregationInfoDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <variable> has a value
     *
     * @return boolean
     */
    public function hasVariable(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variable> value
     *
     * @return \obiba\mica\AggregationsConfigDto
     */
    public function clearVariable(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variable> value
     *
     * @param int $idx
     * @return \obiba\mica\AggregationInfoDto
     */
    public function getVariable($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <variable> value
     *
     * @param \obiba\mica\AggregationInfoDto $value
     * @return \obiba\mica\AggregationsConfigDto
     */
    public function setVariable(\obiba\mica\AggregationInfoDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <variable>
     *
     * @return \obiba\mica\AggregationInfoDto[]
     */
    public function getVariableList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <variable>
     *
     * @param \obiba\mica\AggregationInfoDto $value
     * @return \obiba\mica\AggregationsConfigDto
     */
    public function addVariable(\obiba\mica\AggregationInfoDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class AggregationInfoDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $title = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AggregationInfoDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\AggregationInfoDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\AggregationInfoDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \obiba\mica\AggregationInfoDto
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getTitle($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <title> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AggregationInfoDto
     */
    public function setTitle(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <title>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getTitleList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <title>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AggregationInfoDto
     */
    public function addTitle(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class AttributeDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AttributeDto');

      // OPTIONAL STRING namespace = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE values = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(1);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \obiba\mica\AttributeDto
     */
    public function clearNamespace(){
      return $this->_clear(1);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(1);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \obiba\mica\AttributeDto
     */
    public function setNamespace( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\AttributeDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\AttributeDto
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(3);
    }
    
    /**
     * Clear <values> value
     *
     * @return \obiba\mica\AttributeDto
     */
    public function clearValues(){
      return $this->_clear(3);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getValues($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AttributeDto
     */
    public function setValues(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getValuesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AttributeDto
     */
    public function addValues(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class TaxonomyEntityDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $titles = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $descriptions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TaxonomyEntityDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE titles = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "titles";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE descriptions = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "descriptions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <titles> has a value
     *
     * @return boolean
     */
    public function hasTitles(){
      return $this->_has(2);
    }
    
    /**
     * Clear <titles> value
     *
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function clearTitles(){
      return $this->_clear(2);
    }
    
    /**
     * Get <titles> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getTitles($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <titles> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function setTitles(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <titles>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getTitlesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <titles>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function addTitles(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <descriptions> has a value
     *
     * @return boolean
     */
    public function hasDescriptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <descriptions> value
     *
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function clearDescriptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <descriptions> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescriptions($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <descriptions> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function setDescriptions(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <descriptions>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <descriptions>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function addDescriptions(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class TermAttributeDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\TaxonomyEntityDto */
    public $vocabulary = null;
    
    /**  @var \obiba\mica\TaxonomyEntityDto[]  */
    public $terms = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TermAttributeDto');

      // REQUIRED MESSAGE vocabulary = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "vocabulary";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\TaxonomyEntityDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE terms = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "terms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\TaxonomyEntityDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <vocabulary> has a value
     *
     * @return boolean
     */
    public function hasVocabulary(){
      return $this->_has(1);
    }
    
    /**
     * Clear <vocabulary> value
     *
     * @return \obiba\mica\TermAttributeDto
     */
    public function clearVocabulary(){
      return $this->_clear(1);
    }
    
    /**
     * Get <vocabulary> value
     *
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function getVocabulary(){
      return $this->_get(1);
    }
    
    /**
     * Set <vocabulary> value
     *
     * @param \obiba\mica\TaxonomyEntityDto $value
     * @return \obiba\mica\TermAttributeDto
     */
    public function setVocabulary(\obiba\mica\TaxonomyEntityDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <terms> has a value
     *
     * @return boolean
     */
    public function hasTerms(){
      return $this->_has(2);
    }
    
    /**
     * Clear <terms> value
     *
     * @return \obiba\mica\TermAttributeDto
     */
    public function clearTerms(){
      return $this->_clear(2);
    }
    
    /**
     * Get <terms> value
     *
     * @param int $idx
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function getTerms($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <terms> value
     *
     * @param \obiba\mica\TaxonomyEntityDto $value
     * @return \obiba\mica\TermAttributeDto
     */
    public function setTerms(\obiba\mica\TaxonomyEntityDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <terms>
     *
     * @return \obiba\mica\TaxonomyEntityDto[]
     */
    public function getTermsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <terms>
     *
     * @param \obiba\mica\TaxonomyEntityDto $value
     * @return \obiba\mica\TermAttributeDto
     */
    public function addTerms(\obiba\mica\TaxonomyEntityDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class TermAttributesDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\TaxonomyEntityDto */
    public $taxonomy = null;
    
    /**  @var \obiba\mica\TermAttributeDto[]  */
    public $vocabularyTerms = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TermAttributesDto');

      // REQUIRED MESSAGE taxonomy = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "taxonomy";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\TaxonomyEntityDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE vocabularyTerms = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "vocabularyTerms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\TermAttributeDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <taxonomy> has a value
     *
     * @return boolean
     */
    public function hasTaxonomy(){
      return $this->_has(1);
    }
    
    /**
     * Clear <taxonomy> value
     *
     * @return \obiba\mica\TermAttributesDto
     */
    public function clearTaxonomy(){
      return $this->_clear(1);
    }
    
    /**
     * Get <taxonomy> value
     *
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function getTaxonomy(){
      return $this->_get(1);
    }
    
    /**
     * Set <taxonomy> value
     *
     * @param \obiba\mica\TaxonomyEntityDto $value
     * @return \obiba\mica\TermAttributesDto
     */
    public function setTaxonomy(\obiba\mica\TaxonomyEntityDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <vocabularyTerms> has a value
     *
     * @return boolean
     */
    public function hasVocabularyTerms(){
      return $this->_has(2);
    }
    
    /**
     * Clear <vocabularyTerms> value
     *
     * @return \obiba\mica\TermAttributesDto
     */
    public function clearVocabularyTerms(){
      return $this->_clear(2);
    }
    
    /**
     * Get <vocabularyTerms> value
     *
     * @param int $idx
     * @return \obiba\mica\TermAttributeDto
     */
    public function getVocabularyTerms($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <vocabularyTerms> value
     *
     * @param \obiba\mica\TermAttributeDto $value
     * @return \obiba\mica\TermAttributesDto
     */
    public function setVocabularyTerms(\obiba\mica\TermAttributeDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <vocabularyTerms>
     *
     * @return \obiba\mica\TermAttributeDto[]
     */
    public function getVocabularyTermsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <vocabularyTerms>
     *
     * @param \obiba\mica\TermAttributeDto $value
     * @return \obiba\mica\TermAttributesDto
     */
    public function addVocabularyTerms(\obiba\mica\TermAttributeDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica\DatasetDto {

  class StudyTableDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $studyId = null;
    
    /**  @var string */
    public $populationId = null;
    
    /**  @var string */
    public $dataCollectionEventId = null;
    
    /**  @var string */
    public $project = null;
    
    /**  @var string */
    public $table = null;
    
    /**  @var string */
    public $dceId = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var \obiba\mica\StudySummaryDto */
    public $studySummary = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetDto.StudyTableDto');

      // REQUIRED STRING studyId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "studyId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING populationId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "populationId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING dataCollectionEventId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "dataCollectionEventId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING project = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "project";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING table = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING dceId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "dceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE studySummary = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "studySummary";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudySummaryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <studyId> has a value
     *
     * @return boolean
     */
    public function hasStudyId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <studyId> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearStudyId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <studyId> value
     *
     * @return string
     */
    public function getStudyId(){
      return $this->_get(1);
    }
    
    /**
     * Set <studyId> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setStudyId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <populationId> has a value
     *
     * @return boolean
     */
    public function hasPopulationId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <populationId> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearPopulationId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <populationId> value
     *
     * @return string
     */
    public function getPopulationId(){
      return $this->_get(2);
    }
    
    /**
     * Set <populationId> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setPopulationId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <dataCollectionEventId> has a value
     *
     * @return boolean
     */
    public function hasDataCollectionEventId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <dataCollectionEventId> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearDataCollectionEventId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <dataCollectionEventId> value
     *
     * @return string
     */
    public function getDataCollectionEventId(){
      return $this->_get(3);
    }
    
    /**
     * Set <dataCollectionEventId> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setDataCollectionEventId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <project> has a value
     *
     * @return boolean
     */
    public function hasProject(){
      return $this->_has(4);
    }
    
    /**
     * Clear <project> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearProject(){
      return $this->_clear(4);
    }
    
    /**
     * Get <project> value
     *
     * @return string
     */
    public function getProject(){
      return $this->_get(4);
    }
    
    /**
     * Set <project> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setProject( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(5);
    }
    
    /**
     * Clear <table> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearTable(){
      return $this->_clear(5);
    }
    
    /**
     * Get <table> value
     *
     * @return string
     */
    public function getTable(){
      return $this->_get(5);
    }
    
    /**
     * Set <table> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setTable( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <dceId> has a value
     *
     * @return boolean
     */
    public function hasDceId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <dceId> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearDceId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <dceId> value
     *
     * @return string
     */
    public function getDceId(){
      return $this->_get(6);
    }
    
    /**
     * Set <dceId> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setDceId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(8);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearDescription(){
      return $this->_clear(8);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <studySummary> has a value
     *
     * @return boolean
     */
    public function hasStudySummary(){
      return $this->_has(9);
    }
    
    /**
     * Clear <studySummary> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function clearStudySummary(){
      return $this->_clear(9);
    }
    
    /**
     * Get <studySummary> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function getStudySummary(){
      return $this->_get(9);
    }
    
    /**
     * Set <studySummary> value
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function setStudySummary(\obiba\mica\StudySummaryDto $value){
      return $this->_set(9, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $acronym = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var string */
    public $entityType = null;
    
    /**  @var boolean */
    public $published = null;
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var string */
    public $variableType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE acronym = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "acronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REQUIRED STRING entityType = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BOOL published = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "published";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // OPTIONAL STRING variableType = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "variableType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <acronym> has a value
     *
     * @return boolean
     */
    public function hasAcronym(){
      return $this->_has(3);
    }
    
    /**
     * Clear <acronym> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearAcronym(){
      return $this->_clear(3);
    }
    
    /**
     * Get <acronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getAcronym($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <acronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function setAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <acronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getAcronymList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <acronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function addAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(4);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearDescription(){
      return $this->_clear(4);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearEntityType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(5);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto
     */
    public function setEntityType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <published> has a value
     *
     * @return boolean
     */
    public function hasPublished(){
      return $this->_has(6);
    }
    
    /**
     * Clear <published> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearPublished(){
      return $this->_clear(6);
    }
    
    /**
     * Get <published> value
     *
     * @return boolean
     */
    public function getPublished(){
      return $this->_get(6);
    }
    
    /**
     * Set <published> value
     *
     * @param boolean $value
     * @return \obiba\mica\DatasetDto
     */
    public function setPublished( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(7);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearAttributes(){
      return $this->_clear(7);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(8);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearTimestamps(){
      return $this->_clear(8);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(8);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\DatasetDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <variableType> has a value
     *
     * @return boolean
     */
    public function hasVariableType(){
      return $this->_has(9);
    }
    
    /**
     * Clear <variableType> value
     *
     * @return \obiba\mica\DatasetDto
     */
    public function clearVariableType(){
      return $this->_clear(9);
    }
    
    /**
     * Get <variableType> value
     *
     * @return string
     */
    public function getVariableType(){
      return $this->_get(9);
    }
    
    /**
     * Set <variableType> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetDto
     */
    public function setVariableType( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace obiba\mica {

  class StudyDatasetDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetDto\StudyTableDto */
    public $studyTable = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDatasetDto');

      // REQUIRED MESSAGE studyTable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "studyTable";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\DatasetDto\StudyTableDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <studyTable> has a value
     *
     * @return boolean
     */
    public function hasStudyTable(){
      return $this->_has(1);
    }
    
    /**
     * Clear <studyTable> value
     *
     * @return \obiba\mica\StudyDatasetDto
     */
    public function clearStudyTable(){
      return $this->_clear(1);
    }
    
    /**
     * Get <studyTable> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function getStudyTable(){
      return $this->_get(1);
    }
    
    /**
     * Set <studyTable> value
     *
     * @param \obiba\mica\DatasetDto\StudyTableDto $value
     * @return \obiba\mica\StudyDatasetDto
     */
    public function setStudyTable(\obiba\mica\DatasetDto\StudyTableDto $value){
      return $this->_set(1, $value);
    }
  }
}

namespace obiba\mica {

  class HarmonizationDatasetDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project = null;
    
    /**  @var string */
    public $table = null;
    
    /**  @var \obiba\mica\DatasetDto\StudyTableDto[]  */
    public $studyTables = array();
    
    /**  @var string */
    public $networkId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.HarmonizationDatasetDto');

      // REQUIRED STRING project = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING table = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE studyTables = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "studyTables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetDto\StudyTableDto';
      $descriptor->addField($f);

      // OPTIONAL STRING networkId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "networkId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project> has a value
     *
     * @return boolean
     */
    public function hasProject(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project> value
     *
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function clearProject(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project> value
     *
     * @return string
     */
    public function getProject(){
      return $this->_get(1);
    }
    
    /**
     * Set <project> value
     *
     * @param string $value
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function setProject( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(2);
    }
    
    /**
     * Clear <table> value
     *
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function clearTable(){
      return $this->_clear(2);
    }
    
    /**
     * Get <table> value
     *
     * @return string
     */
    public function getTable(){
      return $this->_get(2);
    }
    
    /**
     * Set <table> value
     *
     * @param string $value
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function setTable( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <studyTables> has a value
     *
     * @return boolean
     */
    public function hasStudyTables(){
      return $this->_has(3);
    }
    
    /**
     * Clear <studyTables> value
     *
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function clearStudyTables(){
      return $this->_clear(3);
    }
    
    /**
     * Get <studyTables> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function getStudyTables($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <studyTables> value
     *
     * @param \obiba\mica\DatasetDto\StudyTableDto $value
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function setStudyTables(\obiba\mica\DatasetDto\StudyTableDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <studyTables>
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto[]
     */
    public function getStudyTablesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <studyTables>
     *
     * @param \obiba\mica\DatasetDto\StudyTableDto $value
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function addStudyTables(\obiba\mica\DatasetDto\StudyTableDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <networkId> has a value
     *
     * @return boolean
     */
    public function hasNetworkId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <networkId> value
     *
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function clearNetworkId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <networkId> value
     *
     * @return string
     */
    public function getNetworkId(){
      return $this->_get(4);
    }
    
    /**
     * Set <networkId> value
     *
     * @param string $value
     * @return \obiba\mica\HarmonizationDatasetDto
     */
    public function setNetworkId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetsDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $from = null;
    
    /**  @var int */
    public $limit = null;
    
    /**  @var \obiba\mica\DatasetDto[]  */
    public $datasets = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetsDto');

      // REQUIRED INT32 total = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 from = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 limit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE datasets = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "datasets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <total> value
     *
     * @return \obiba\mica\DatasetsDto
     */
    public function clearTotal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(1);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetsDto
     */
    public function setTotal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(2);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\DatasetsDto
     */
    public function clearFrom(){
      return $this->_clear(2);
    }
    
    /**
     * Get <from> value
     *
     * @return int
     */
    public function getFrom(){
      return $this->_get(2);
    }
    
    /**
     * Set <from> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetsDto
     */
    public function setFrom( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <limit> value
     *
     * @return \obiba\mica\DatasetsDto
     */
    public function clearLimit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(3);
    }
    
    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetsDto
     */
    public function setLimit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <datasets> has a value
     *
     * @return boolean
     */
    public function hasDatasets(){
      return $this->_has(4);
    }
    
    /**
     * Clear <datasets> value
     *
     * @return \obiba\mica\DatasetsDto
     */
    public function clearDatasets(){
      return $this->_clear(4);
    }
    
    /**
     * Get <datasets> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetDto
     */
    public function getDatasets($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <datasets> value
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetsDto
     */
    public function setDatasets(\obiba\mica\DatasetDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <datasets>
     *
     * @return \obiba\mica\DatasetDto[]
     */
    public function getDatasetsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <datasets>
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetsDto
     */
    public function addDatasets(\obiba\mica\DatasetDto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetCategoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var boolean */
    public $missing = null;
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetCategoryDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL missing = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "missing";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\DatasetCategoryDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetCategoryDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <missing> has a value
     *
     * @return boolean
     */
    public function hasMissing(){
      return $this->_has(2);
    }
    
    /**
     * Clear <missing> value
     *
     * @return \obiba\mica\DatasetCategoryDto
     */
    public function clearMissing(){
      return $this->_clear(2);
    }
    
    /**
     * Get <missing> value
     *
     * @return boolean
     */
    public function getMissing(){
      return $this->_get(2);
    }
    
    /**
     * Set <missing> value
     *
     * @param boolean $value
     * @return \obiba\mica\DatasetCategoryDto
     */
    public function setMissing( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\DatasetCategoryDto
     */
    public function clearAttributes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\DatasetCategoryDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\DatasetCategoryDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $datasetId = null;
    
    /**  @var string[]  */
    public $studyIds = array();
    
    /**  @var string */
    public $variableType = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $entityType = null;
    
    /**  @var string */
    public $valueType = null;
    
    /**  @var string */
    public $mimeType = null;
    
    /**  @var boolean */
    public $repeatable = null;
    
    /**  @var string */
    public $occurrenceGroup = null;
    
    /**  @var string */
    public $unit = null;
    
    /**  @var string */
    public $referencedEntityType = null;
    
    /**  @var string */
    public $nature = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    
    /**  @var \obiba\mica\DatasetCategoryDto[]  */
    public $categories = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $datasetName = array();
    
    /**  @var \obiba\mica\StudySummaryDto[]  */
    public $studySummaries = array();
    
    /**  @var \obiba\mica\TermAttributesDto[]  */
    public $termAttributes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING datasetId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "datasetId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING studyIds = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "studyIds";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING variableType = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "variableType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING entityType = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING valueType = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "valueType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING mimeType = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "mimeType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED BOOL repeatable = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "repeatable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING occurrenceGroup = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "occurrenceGroup";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING unit = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "unit";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING referencedEntityType = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "referencedEntityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING nature = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "nature";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE categories = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "categories";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetCategoryDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE datasetName = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "datasetName";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE studySummaries = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "studySummaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudySummaryDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE termAttributes = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "termAttributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\TermAttributesDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <datasetId> has a value
     *
     * @return boolean
     */
    public function hasDatasetId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <datasetId> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearDatasetId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <datasetId> value
     *
     * @return string
     */
    public function getDatasetId(){
      return $this->_get(2);
    }
    
    /**
     * Set <datasetId> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setDatasetId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <studyIds> has a value
     *
     * @return boolean
     */
    public function hasStudyIds(){
      return $this->_has(3);
    }
    
    /**
     * Clear <studyIds> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearStudyIds(){
      return $this->_clear(3);
    }
    
    /**
     * Get <studyIds> value
     *
     * @param int $idx
     * @return string
     */
    public function getStudyIds($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <studyIds> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setStudyIds( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <studyIds>
     *
     * @return string[]
     */
    public function getStudyIdsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <studyIds>
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function addStudyIds( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <variableType> has a value
     *
     * @return boolean
     */
    public function hasVariableType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <variableType> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearVariableType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <variableType> value
     *
     * @return string
     */
    public function getVariableType(){
      return $this->_get(4);
    }
    
    /**
     * Set <variableType> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setVariableType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(5);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(6);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearEntityType(){
      return $this->_clear(6);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(6);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setEntityType( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <valueType> has a value
     *
     * @return boolean
     */
    public function hasValueType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <valueType> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearValueType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <valueType> value
     *
     * @return string
     */
    public function getValueType(){
      return $this->_get(7);
    }
    
    /**
     * Set <valueType> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setValueType( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <mimeType> has a value
     *
     * @return boolean
     */
    public function hasMimeType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <mimeType> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearMimeType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <mimeType> value
     *
     * @return string
     */
    public function getMimeType(){
      return $this->_get(8);
    }
    
    /**
     * Set <mimeType> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setMimeType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <repeatable> has a value
     *
     * @return boolean
     */
    public function hasRepeatable(){
      return $this->_has(9);
    }
    
    /**
     * Clear <repeatable> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearRepeatable(){
      return $this->_clear(9);
    }
    
    /**
     * Get <repeatable> value
     *
     * @return boolean
     */
    public function getRepeatable(){
      return $this->_get(9);
    }
    
    /**
     * Set <repeatable> value
     *
     * @param boolean $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setRepeatable( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <occurrenceGroup> has a value
     *
     * @return boolean
     */
    public function hasOccurrenceGroup(){
      return $this->_has(10);
    }
    
    /**
     * Clear <occurrenceGroup> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearOccurrenceGroup(){
      return $this->_clear(10);
    }
    
    /**
     * Get <occurrenceGroup> value
     *
     * @return string
     */
    public function getOccurrenceGroup(){
      return $this->_get(10);
    }
    
    /**
     * Set <occurrenceGroup> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setOccurrenceGroup( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <unit> has a value
     *
     * @return boolean
     */
    public function hasUnit(){
      return $this->_has(11);
    }
    
    /**
     * Clear <unit> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearUnit(){
      return $this->_clear(11);
    }
    
    /**
     * Get <unit> value
     *
     * @return string
     */
    public function getUnit(){
      return $this->_get(11);
    }
    
    /**
     * Set <unit> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setUnit( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <referencedEntityType> has a value
     *
     * @return boolean
     */
    public function hasReferencedEntityType(){
      return $this->_has(12);
    }
    
    /**
     * Clear <referencedEntityType> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearReferencedEntityType(){
      return $this->_clear(12);
    }
    
    /**
     * Get <referencedEntityType> value
     *
     * @return string
     */
    public function getReferencedEntityType(){
      return $this->_get(12);
    }
    
    /**
     * Set <referencedEntityType> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setReferencedEntityType( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <nature> has a value
     *
     * @return boolean
     */
    public function hasNature(){
      return $this->_has(13);
    }
    
    /**
     * Clear <nature> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearNature(){
      return $this->_clear(13);
    }
    
    /**
     * Get <nature> value
     *
     * @return string
     */
    public function getNature(){
      return $this->_get(13);
    }
    
    /**
     * Set <nature> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setNature( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(14);
    }
    
    /**
     * Clear <index> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearIndex(){
      return $this->_clear(14);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(14);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setIndex( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(15);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearAttributes(){
      return $this->_clear(15);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <categories> has a value
     *
     * @return boolean
     */
    public function hasCategories(){
      return $this->_has(16);
    }
    
    /**
     * Clear <categories> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearCategories(){
      return $this->_clear(16);
    }
    
    /**
     * Get <categories> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetCategoryDto
     */
    public function getCategories($idx = NULL){
      return $this->_get(16, $idx);
    }
    
    /**
     * Set <categories> value
     *
     * @param \obiba\mica\DatasetCategoryDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setCategories(\obiba\mica\DatasetCategoryDto $value, $idx = NULL){
      return $this->_set(16, $value, $idx);
    }
    
    /**
     * Get all elements of <categories>
     *
     * @return \obiba\mica\DatasetCategoryDto[]
     */
    public function getCategoriesList(){
     return $this->_get(16);
    }
    
    /**
     * Add a new element to <categories>
     *
     * @param \obiba\mica\DatasetCategoryDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function addCategories(\obiba\mica\DatasetCategoryDto $value){
     return $this->_add(16, $value);
    }
    
    /**
     * Check if <datasetName> has a value
     *
     * @return boolean
     */
    public function hasDatasetName(){
      return $this->_has(17);
    }
    
    /**
     * Clear <datasetName> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearDatasetName(){
      return $this->_clear(17);
    }
    
    /**
     * Get <datasetName> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDatasetName($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <datasetName> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setDatasetName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <datasetName>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDatasetNameList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <datasetName>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function addDatasetName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <studySummaries> has a value
     *
     * @return boolean
     */
    public function hasStudySummaries(){
      return $this->_has(18);
    }
    
    /**
     * Clear <studySummaries> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearStudySummaries(){
      return $this->_clear(18);
    }
    
    /**
     * Get <studySummaries> value
     *
     * @param int $idx
     * @return \obiba\mica\StudySummaryDto
     */
    public function getStudySummaries($idx = NULL){
      return $this->_get(18, $idx);
    }
    
    /**
     * Set <studySummaries> value
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setStudySummaries(\obiba\mica\StudySummaryDto $value, $idx = NULL){
      return $this->_set(18, $value, $idx);
    }
    
    /**
     * Get all elements of <studySummaries>
     *
     * @return \obiba\mica\StudySummaryDto[]
     */
    public function getStudySummariesList(){
     return $this->_get(18);
    }
    
    /**
     * Add a new element to <studySummaries>
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function addStudySummaries(\obiba\mica\StudySummaryDto $value){
     return $this->_add(18, $value);
    }
    
    /**
     * Check if <termAttributes> has a value
     *
     * @return boolean
     */
    public function hasTermAttributes(){
      return $this->_has(19);
    }
    
    /**
     * Clear <termAttributes> value
     *
     * @return \obiba\mica\DatasetVariableDto
     */
    public function clearTermAttributes(){
      return $this->_clear(19);
    }
    
    /**
     * Get <termAttributes> value
     *
     * @param int $idx
     * @return \obiba\mica\TermAttributesDto
     */
    public function getTermAttributes($idx = NULL){
      return $this->_get(19, $idx);
    }
    
    /**
     * Set <termAttributes> value
     *
     * @param \obiba\mica\TermAttributesDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function setTermAttributes(\obiba\mica\TermAttributesDto $value, $idx = NULL){
      return $this->_set(19, $value, $idx);
    }
    
    /**
     * Get all elements of <termAttributes>
     *
     * @return \obiba\mica\TermAttributesDto[]
     */
    public function getTermAttributesList(){
     return $this->_get(19);
    }
    
    /**
     * Add a new element to <termAttributes>
     *
     * @param \obiba\mica\TermAttributesDto $value
     * @return \obiba\mica\DatasetVariableDto
     */
    public function addTermAttributes(\obiba\mica\TermAttributesDto $value){
     return $this->_add(19, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariablesDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $from = null;
    
    /**  @var int */
    public $limit = null;
    
    /**  @var \obiba\mica\DatasetVariableDto[]  */
    public $variables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariablesDto');

      // REQUIRED INT32 total = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 from = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 limit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE variables = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "variables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <total> value
     *
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function clearTotal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(1);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function setTotal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(2);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function clearFrom(){
      return $this->_clear(2);
    }
    
    /**
     * Get <from> value
     *
     * @return int
     */
    public function getFrom(){
      return $this->_get(2);
    }
    
    /**
     * Set <from> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function setFrom( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <limit> value
     *
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function clearLimit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(3);
    }
    
    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function setLimit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables(){
      return $this->_has(4);
    }
    
    /**
     * Clear <variables> value
     *
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function clearVariables(){
      return $this->_clear(4);
    }
    
    /**
     * Get <variables> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableDto
     */
    public function getVariables($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <variables> value
     *
     * @param \obiba\mica\DatasetVariableDto $value
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function setVariables(\obiba\mica\DatasetVariableDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <variables>
     *
     * @return \obiba\mica\DatasetVariableDto[]
     */
    public function getVariablesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <variables>
     *
     * @param \obiba\mica\DatasetVariableDto $value
     * @return \obiba\mica\DatasetVariablesDto
     */
    public function addVariables(\obiba\mica\DatasetVariableDto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableResolverDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $datasetId = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $variableType = null;
    
    /**  @var string */
    public $studyId = null;
    
    /**  @var string */
    public $project = null;
    
    /**  @var string */
    public $table = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $datasetName = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $datasetAcronym = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $variableLabel = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $studyName = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $studyAcronym = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableResolverDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING datasetId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "datasetId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING variableType = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "variableType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING studyId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "studyId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING project = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "project";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING table = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE datasetName = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "datasetName";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE datasetAcronym = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "datasetAcronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE variableLabel = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "variableLabel";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE studyName = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "studyName";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE studyAcronym = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "studyAcronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <datasetId> has a value
     *
     * @return boolean
     */
    public function hasDatasetId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <datasetId> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearDatasetId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <datasetId> value
     *
     * @return string
     */
    public function getDatasetId(){
      return $this->_get(2);
    }
    
    /**
     * Set <datasetId> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setDatasetId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <variableType> has a value
     *
     * @return boolean
     */
    public function hasVariableType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <variableType> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearVariableType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <variableType> value
     *
     * @return string
     */
    public function getVariableType(){
      return $this->_get(4);
    }
    
    /**
     * Set <variableType> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setVariableType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <studyId> has a value
     *
     * @return boolean
     */
    public function hasStudyId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <studyId> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearStudyId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <studyId> value
     *
     * @return string
     */
    public function getStudyId(){
      return $this->_get(5);
    }
    
    /**
     * Set <studyId> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setStudyId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <project> has a value
     *
     * @return boolean
     */
    public function hasProject(){
      return $this->_has(6);
    }
    
    /**
     * Clear <project> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearProject(){
      return $this->_clear(6);
    }
    
    /**
     * Get <project> value
     *
     * @return string
     */
    public function getProject(){
      return $this->_get(6);
    }
    
    /**
     * Set <project> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setProject( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(7);
    }
    
    /**
     * Clear <table> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearTable(){
      return $this->_clear(7);
    }
    
    /**
     * Get <table> value
     *
     * @return string
     */
    public function getTable(){
      return $this->_get(7);
    }
    
    /**
     * Set <table> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setTable( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <datasetName> has a value
     *
     * @return boolean
     */
    public function hasDatasetName(){
      return $this->_has(8);
    }
    
    /**
     * Clear <datasetName> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearDatasetName(){
      return $this->_clear(8);
    }
    
    /**
     * Get <datasetName> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDatasetName($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <datasetName> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setDatasetName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <datasetName>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDatasetNameList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <datasetName>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function addDatasetName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <datasetAcronym> has a value
     *
     * @return boolean
     */
    public function hasDatasetAcronym(){
      return $this->_has(9);
    }
    
    /**
     * Clear <datasetAcronym> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearDatasetAcronym(){
      return $this->_clear(9);
    }
    
    /**
     * Get <datasetAcronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDatasetAcronym($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <datasetAcronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setDatasetAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <datasetAcronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDatasetAcronymList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <datasetAcronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function addDatasetAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <variableLabel> has a value
     *
     * @return boolean
     */
    public function hasVariableLabel(){
      return $this->_has(10);
    }
    
    /**
     * Clear <variableLabel> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearVariableLabel(){
      return $this->_clear(10);
    }
    
    /**
     * Get <variableLabel> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getVariableLabel($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <variableLabel> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setVariableLabel(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <variableLabel>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getVariableLabelList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <variableLabel>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function addVariableLabel(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <studyName> has a value
     *
     * @return boolean
     */
    public function hasStudyName(){
      return $this->_has(11);
    }
    
    /**
     * Clear <studyName> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearStudyName(){
      return $this->_clear(11);
    }
    
    /**
     * Get <studyName> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getStudyName($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <studyName> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setStudyName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <studyName>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getStudyNameList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <studyName>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function addStudyName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <studyAcronym> has a value
     *
     * @return boolean
     */
    public function hasStudyAcronym(){
      return $this->_has(12);
    }
    
    /**
     * Clear <studyAcronym> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function clearStudyAcronym(){
      return $this->_clear(12);
    }
    
    /**
     * Get <studyAcronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getStudyAcronym($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <studyAcronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function setStudyAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <studyAcronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getStudyAcronymList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <studyAcronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function addStudyAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(12, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableSummaryDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetVariableResolverDto */
    public $resolver = null;
    
    /**  @var \obiba\mica\AttributeDto[]  */
    public $attributes = array();
    
    /**  @var \obiba\mica\DatasetDto\StudyTableDto */
    public $studyTable = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableSummaryDto');

      // REQUIRED MESSAGE resolver = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "resolver";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\DatasetVariableResolverDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttributeDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE studyTable = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "studyTable";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\DatasetDto\StudyTableDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <resolver> has a value
     *
     * @return boolean
     */
    public function hasResolver(){
      return $this->_has(1);
    }
    
    /**
     * Clear <resolver> value
     *
     * @return \obiba\mica\DatasetVariableSummaryDto
     */
    public function clearResolver(){
      return $this->_clear(1);
    }
    
    /**
     * Get <resolver> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function getResolver(){
      return $this->_get(1);
    }
    
    /**
     * Set <resolver> value
     *
     * @param \obiba\mica\DatasetVariableResolverDto $value
     * @return \obiba\mica\DatasetVariableSummaryDto
     */
    public function setResolver(\obiba\mica\DatasetVariableResolverDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\DatasetVariableSummaryDto
     */
    public function clearAttributes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\DatasetVariableSummaryDto
     */
    public function setAttributes(\obiba\mica\AttributeDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\AttributeDto $value
     * @return \obiba\mica\DatasetVariableSummaryDto
     */
    public function addAttributes(\obiba\mica\AttributeDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <studyTable> has a value
     *
     * @return boolean
     */
    public function hasStudyTable(){
      return $this->_has(3);
    }
    
    /**
     * Clear <studyTable> value
     *
     * @return \obiba\mica\DatasetVariableSummaryDto
     */
    public function clearStudyTable(){
      return $this->_clear(3);
    }
    
    /**
     * Get <studyTable> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function getStudyTable(){
      return $this->_get(3);
    }
    
    /**
     * Set <studyTable> value
     *
     * @param \obiba\mica\DatasetDto\StudyTableDto $value
     * @return \obiba\mica\DatasetVariableSummaryDto
     */
    public function setStudyTable(\obiba\mica\DatasetDto\StudyTableDto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableHarmonizationDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetVariableResolverDto */
    public $resolver = null;
    
    /**  @var \obiba\mica\DatasetVariableSummaryDto[]  */
    public $datasetVariableSummaries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableHarmonizationDto');

      // REQUIRED MESSAGE resolver = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "resolver";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\DatasetVariableResolverDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE datasetVariableSummaries = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "datasetVariableSummaries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableSummaryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <resolver> has a value
     *
     * @return boolean
     */
    public function hasResolver(){
      return $this->_has(1);
    }
    
    /**
     * Clear <resolver> value
     *
     * @return \obiba\mica\DatasetVariableHarmonizationDto
     */
    public function clearResolver(){
      return $this->_clear(1);
    }
    
    /**
     * Get <resolver> value
     *
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function getResolver(){
      return $this->_get(1);
    }
    
    /**
     * Set <resolver> value
     *
     * @param \obiba\mica\DatasetVariableResolverDto $value
     * @return \obiba\mica\DatasetVariableHarmonizationDto
     */
    public function setResolver(\obiba\mica\DatasetVariableResolverDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <datasetVariableSummaries> has a value
     *
     * @return boolean
     */
    public function hasDatasetVariableSummaries(){
      return $this->_has(2);
    }
    
    /**
     * Clear <datasetVariableSummaries> value
     *
     * @return \obiba\mica\DatasetVariableHarmonizationDto
     */
    public function clearDatasetVariableSummaries(){
      return $this->_clear(2);
    }
    
    /**
     * Get <datasetVariableSummaries> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableSummaryDto
     */
    public function getDatasetVariableSummaries($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <datasetVariableSummaries> value
     *
     * @param \obiba\mica\DatasetVariableSummaryDto $value
     * @return \obiba\mica\DatasetVariableHarmonizationDto
     */
    public function setDatasetVariableSummaries(\obiba\mica\DatasetVariableSummaryDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <datasetVariableSummaries>
     *
     * @return \obiba\mica\DatasetVariableSummaryDto[]
     */
    public function getDatasetVariableSummariesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <datasetVariableSummaries>
     *
     * @param \obiba\mica\DatasetVariableSummaryDto $value
     * @return \obiba\mica\DatasetVariableHarmonizationDto
     */
    public function addDatasetVariableSummaries(\obiba\mica\DatasetVariableSummaryDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariablesHarmonizationsDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $from = null;
    
    /**  @var int */
    public $limit = null;
    
    /**  @var \obiba\mica\DatasetVariableHarmonizationDto[]  */
    public $variableHarmonizations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariablesHarmonizationsDto');

      // REQUIRED INT32 total = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 from = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 limit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE variableHarmonizations = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "variableHarmonizations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableHarmonizationDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <total> value
     *
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function clearTotal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(1);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function setTotal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(2);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function clearFrom(){
      return $this->_clear(2);
    }
    
    /**
     * Get <from> value
     *
     * @return int
     */
    public function getFrom(){
      return $this->_get(2);
    }
    
    /**
     * Set <from> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function setFrom( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <limit> value
     *
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function clearLimit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(3);
    }
    
    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function setLimit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <variableHarmonizations> has a value
     *
     * @return boolean
     */
    public function hasVariableHarmonizations(){
      return $this->_has(4);
    }
    
    /**
     * Clear <variableHarmonizations> value
     *
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function clearVariableHarmonizations(){
      return $this->_clear(4);
    }
    
    /**
     * Get <variableHarmonizations> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableHarmonizationDto
     */
    public function getVariableHarmonizations($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <variableHarmonizations> value
     *
     * @param \obiba\mica\DatasetVariableHarmonizationDto $value
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function setVariableHarmonizations(\obiba\mica\DatasetVariableHarmonizationDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <variableHarmonizations>
     *
     * @return \obiba\mica\DatasetVariableHarmonizationDto[]
     */
    public function getVariableHarmonizationsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <variableHarmonizations>
     *
     * @param \obiba\mica\DatasetVariableHarmonizationDto $value
     * @return \obiba\mica\DatasetVariablesHarmonizationsDto
     */
    public function addVariableHarmonizations(\obiba\mica\DatasetVariableHarmonizationDto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace obiba\mica {

  class FrequencyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $value = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var boolean */
    public $missing = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.FrequencyDto');

      // REQUIRED STRING value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BOOL missing = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "missing";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \obiba\mica\FrequencyDto
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \obiba\mica\FrequencyDto
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \obiba\mica\FrequencyDto
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \obiba\mica\FrequencyDto
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <missing> has a value
     *
     * @return boolean
     */
    public function hasMissing(){
      return $this->_has(3);
    }
    
    /**
     * Clear <missing> value
     *
     * @return \obiba\mica\FrequencyDto
     */
    public function clearMissing(){
      return $this->_clear(3);
    }
    
    /**
     * Get <missing> value
     *
     * @return boolean
     */
    public function getMissing(){
      return $this->_get(3);
    }
    
    /**
     * Set <missing> value
     *
     * @param boolean $value
     * @return \obiba\mica\FrequencyDto
     */
    public function setMissing( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class StatisticsDto extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $sum = null;
    
    /**  @var float */
    public $min = null;
    
    /**  @var float */
    public $max = null;
    
    /**  @var float */
    public $mean = null;
    
    /**  @var float */
    public $sumOfSquares = null;
    
    /**  @var float */
    public $variance = null;
    
    /**  @var float */
    public $stdDeviation = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StatisticsDto');

      // OPTIONAL FLOAT sum = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sum";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT min = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "min";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT max = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "max";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT mean = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mean";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT sumOfSquares = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sumOfSquares";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT variance = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "variance";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT stdDeviation = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "stdDeviation";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sum> has a value
     *
     * @return boolean
     */
    public function hasSum(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sum> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function clearSum(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sum> value
     *
     * @return float
     */
    public function getSum(){
      return $this->_get(1);
    }
    
    /**
     * Set <sum> value
     *
     * @param float $value
     * @return \obiba\mica\StatisticsDto
     */
    public function setSum( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <min> has a value
     *
     * @return boolean
     */
    public function hasMin(){
      return $this->_has(2);
    }
    
    /**
     * Clear <min> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function clearMin(){
      return $this->_clear(2);
    }
    
    /**
     * Get <min> value
     *
     * @return float
     */
    public function getMin(){
      return $this->_get(2);
    }
    
    /**
     * Set <min> value
     *
     * @param float $value
     * @return \obiba\mica\StatisticsDto
     */
    public function setMin( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <max> has a value
     *
     * @return boolean
     */
    public function hasMax(){
      return $this->_has(3);
    }
    
    /**
     * Clear <max> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function clearMax(){
      return $this->_clear(3);
    }
    
    /**
     * Get <max> value
     *
     * @return float
     */
    public function getMax(){
      return $this->_get(3);
    }
    
    /**
     * Set <max> value
     *
     * @param float $value
     * @return \obiba\mica\StatisticsDto
     */
    public function setMax( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mean> has a value
     *
     * @return boolean
     */
    public function hasMean(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mean> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function clearMean(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mean> value
     *
     * @return float
     */
    public function getMean(){
      return $this->_get(4);
    }
    
    /**
     * Set <mean> value
     *
     * @param float $value
     * @return \obiba\mica\StatisticsDto
     */
    public function setMean( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <sumOfSquares> has a value
     *
     * @return boolean
     */
    public function hasSumOfSquares(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sumOfSquares> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function clearSumOfSquares(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sumOfSquares> value
     *
     * @return float
     */
    public function getSumOfSquares(){
      return $this->_get(5);
    }
    
    /**
     * Set <sumOfSquares> value
     *
     * @param float $value
     * @return \obiba\mica\StatisticsDto
     */
    public function setSumOfSquares( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <variance> has a value
     *
     * @return boolean
     */
    public function hasVariance(){
      return $this->_has(6);
    }
    
    /**
     * Clear <variance> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function clearVariance(){
      return $this->_clear(6);
    }
    
    /**
     * Get <variance> value
     *
     * @return float
     */
    public function getVariance(){
      return $this->_get(6);
    }
    
    /**
     * Set <variance> value
     *
     * @param float $value
     * @return \obiba\mica\StatisticsDto
     */
    public function setVariance( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <stdDeviation> has a value
     *
     * @return boolean
     */
    public function hasStdDeviation(){
      return $this->_has(7);
    }
    
    /**
     * Clear <stdDeviation> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function clearStdDeviation(){
      return $this->_clear(7);
    }
    
    /**
     * Get <stdDeviation> value
     *
     * @return float
     */
    public function getStdDeviation(){
      return $this->_get(7);
    }
    
    /**
     * Set <stdDeviation> value
     *
     * @param float $value
     * @return \obiba\mica\StatisticsDto
     */
    public function setStdDeviation( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableAggregationDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetDto\StudyTableDto */
    public $studyTable = null;
    
    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $n = null;
    
    /**  @var \obiba\mica\FrequencyDto[]  */
    public $frequencies = array();
    
    /**  @var \obiba\mica\StatisticsDto */
    public $statistics = null;
    
    /**  @var string */
    public $term = null;
    
    /**  @var boolean */
    public $missing = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableAggregationDto');

      // OPTIONAL MESSAGE studyTable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "studyTable";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\DatasetDto\StudyTableDto';
      $descriptor->addField($f);

      // REQUIRED INT32 total = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 n = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "n";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE frequencies = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "frequencies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\FrequencyDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE statistics = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "statistics";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StatisticsDto';
      $descriptor->addField($f);

      // OPTIONAL STRING term = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "term";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL missing = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "missing";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <studyTable> has a value
     *
     * @return boolean
     */
    public function hasStudyTable(){
      return $this->_has(1);
    }
    
    /**
     * Clear <studyTable> value
     *
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function clearStudyTable(){
      return $this->_clear(1);
    }
    
    /**
     * Get <studyTable> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function getStudyTable(){
      return $this->_get(1);
    }
    
    /**
     * Set <studyTable> value
     *
     * @param \obiba\mica\DatasetDto\StudyTableDto $value
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function setStudyTable(\obiba\mica\DatasetDto\StudyTableDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(2);
    }
    
    /**
     * Clear <total> value
     *
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function clearTotal(){
      return $this->_clear(2);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(2);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function setTotal( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <n> has a value
     *
     * @return boolean
     */
    public function hasN(){
      return $this->_has(3);
    }
    
    /**
     * Clear <n> value
     *
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function clearN(){
      return $this->_clear(3);
    }
    
    /**
     * Get <n> value
     *
     * @return int
     */
    public function getN(){
      return $this->_get(3);
    }
    
    /**
     * Set <n> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function setN( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <frequencies> has a value
     *
     * @return boolean
     */
    public function hasFrequencies(){
      return $this->_has(4);
    }
    
    /**
     * Clear <frequencies> value
     *
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function clearFrequencies(){
      return $this->_clear(4);
    }
    
    /**
     * Get <frequencies> value
     *
     * @param int $idx
     * @return \obiba\mica\FrequencyDto
     */
    public function getFrequencies($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <frequencies> value
     *
     * @param \obiba\mica\FrequencyDto $value
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function setFrequencies(\obiba\mica\FrequencyDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <frequencies>
     *
     * @return \obiba\mica\FrequencyDto[]
     */
    public function getFrequenciesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <frequencies>
     *
     * @param \obiba\mica\FrequencyDto $value
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function addFrequencies(\obiba\mica\FrequencyDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <statistics> has a value
     *
     * @return boolean
     */
    public function hasStatistics(){
      return $this->_has(5);
    }
    
    /**
     * Clear <statistics> value
     *
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function clearStatistics(){
      return $this->_clear(5);
    }
    
    /**
     * Get <statistics> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function getStatistics(){
      return $this->_get(5);
    }
    
    /**
     * Set <statistics> value
     *
     * @param \obiba\mica\StatisticsDto $value
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function setStatistics(\obiba\mica\StatisticsDto $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <term> has a value
     *
     * @return boolean
     */
    public function hasTerm(){
      return $this->_has(6);
    }
    
    /**
     * Clear <term> value
     *
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function clearTerm(){
      return $this->_clear(6);
    }
    
    /**
     * Get <term> value
     *
     * @return string
     */
    public function getTerm(){
      return $this->_get(6);
    }
    
    /**
     * Set <term> value
     *
     * @param string $value
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function setTerm( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <missing> has a value
     *
     * @return boolean
     */
    public function hasMissing(){
      return $this->_has(7);
    }
    
    /**
     * Clear <missing> value
     *
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function clearMissing(){
      return $this->_clear(7);
    }
    
    /**
     * Get <missing> value
     *
     * @return boolean
     */
    public function getMissing(){
      return $this->_get(7);
    }
    
    /**
     * Set <missing> value
     *
     * @param boolean $value
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function setMissing( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableAggregationsDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetVariableAggregationDto[]  */
    public $aggregations = array();
    
    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $n = null;
    
    /**  @var \obiba\mica\FrequencyDto[]  */
    public $frequencies = array();
    
    /**  @var \obiba\mica\StatisticsDto */
    public $statistics = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableAggregationsDto');

      // REPEATED MESSAGE aggregations = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "aggregations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableAggregationDto';
      $descriptor->addField($f);

      // REQUIRED INT32 total = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 n = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "n";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE frequencies = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "frequencies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\FrequencyDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE statistics = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "statistics";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StatisticsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <aggregations> has a value
     *
     * @return boolean
     */
    public function hasAggregations(){
      return $this->_has(1);
    }
    
    /**
     * Clear <aggregations> value
     *
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function clearAggregations(){
      return $this->_clear(1);
    }
    
    /**
     * Get <aggregations> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function getAggregations($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <aggregations> value
     *
     * @param \obiba\mica\DatasetVariableAggregationDto $value
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function setAggregations(\obiba\mica\DatasetVariableAggregationDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <aggregations>
     *
     * @return \obiba\mica\DatasetVariableAggregationDto[]
     */
    public function getAggregationsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <aggregations>
     *
     * @param \obiba\mica\DatasetVariableAggregationDto $value
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function addAggregations(\obiba\mica\DatasetVariableAggregationDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(2);
    }
    
    /**
     * Clear <total> value
     *
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function clearTotal(){
      return $this->_clear(2);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(2);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function setTotal( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <n> has a value
     *
     * @return boolean
     */
    public function hasN(){
      return $this->_has(3);
    }
    
    /**
     * Clear <n> value
     *
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function clearN(){
      return $this->_clear(3);
    }
    
    /**
     * Get <n> value
     *
     * @return int
     */
    public function getN(){
      return $this->_get(3);
    }
    
    /**
     * Set <n> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function setN( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <frequencies> has a value
     *
     * @return boolean
     */
    public function hasFrequencies(){
      return $this->_has(4);
    }
    
    /**
     * Clear <frequencies> value
     *
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function clearFrequencies(){
      return $this->_clear(4);
    }
    
    /**
     * Get <frequencies> value
     *
     * @param int $idx
     * @return \obiba\mica\FrequencyDto
     */
    public function getFrequencies($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <frequencies> value
     *
     * @param \obiba\mica\FrequencyDto $value
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function setFrequencies(\obiba\mica\FrequencyDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <frequencies>
     *
     * @return \obiba\mica\FrequencyDto[]
     */
    public function getFrequenciesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <frequencies>
     *
     * @param \obiba\mica\FrequencyDto $value
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function addFrequencies(\obiba\mica\FrequencyDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <statistics> has a value
     *
     * @return boolean
     */
    public function hasStatistics(){
      return $this->_has(5);
    }
    
    /**
     * Clear <statistics> value
     *
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function clearStatistics(){
      return $this->_clear(5);
    }
    
    /**
     * Get <statistics> value
     *
     * @return \obiba\mica\StatisticsDto
     */
    public function getStatistics(){
      return $this->_get(5);
    }
    
    /**
     * Set <statistics> value
     *
     * @param \obiba\mica\StatisticsDto $value
     * @return \obiba\mica\DatasetVariableAggregationsDto
     */
    public function setStatistics(\obiba\mica\StatisticsDto $value){
      return $this->_set(5, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableContingencyDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetDto\StudyTableDto */
    public $studyTable = null;
    
    /**  @var \obiba\mica\DatasetVariableAggregationDto[]  */
    public $aggregations = array();
    
    /**  @var \obiba\mica\DatasetVariableAggregationDto */
    public $all = null;
    
    /**  @var int */
    public $privacyThreshold = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableContingencyDto');

      // OPTIONAL MESSAGE studyTable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "studyTable";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\DatasetDto\StudyTableDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE aggregations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "aggregations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableAggregationDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE all = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "all";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\DatasetVariableAggregationDto';
      $descriptor->addField($f);

      // OPTIONAL INT32 privacyThreshold = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "privacyThreshold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <studyTable> has a value
     *
     * @return boolean
     */
    public function hasStudyTable(){
      return $this->_has(1);
    }
    
    /**
     * Clear <studyTable> value
     *
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function clearStudyTable(){
      return $this->_clear(1);
    }
    
    /**
     * Get <studyTable> value
     *
     * @return \obiba\mica\DatasetDto\StudyTableDto
     */
    public function getStudyTable(){
      return $this->_get(1);
    }
    
    /**
     * Set <studyTable> value
     *
     * @param \obiba\mica\DatasetDto\StudyTableDto $value
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function setStudyTable(\obiba\mica\DatasetDto\StudyTableDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <aggregations> has a value
     *
     * @return boolean
     */
    public function hasAggregations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <aggregations> value
     *
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function clearAggregations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <aggregations> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function getAggregations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <aggregations> value
     *
     * @param \obiba\mica\DatasetVariableAggregationDto $value
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function setAggregations(\obiba\mica\DatasetVariableAggregationDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <aggregations>
     *
     * @return \obiba\mica\DatasetVariableAggregationDto[]
     */
    public function getAggregationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <aggregations>
     *
     * @param \obiba\mica\DatasetVariableAggregationDto $value
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function addAggregations(\obiba\mica\DatasetVariableAggregationDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <all> has a value
     *
     * @return boolean
     */
    public function hasAll(){
      return $this->_has(3);
    }
    
    /**
     * Clear <all> value
     *
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function clearAll(){
      return $this->_clear(3);
    }
    
    /**
     * Get <all> value
     *
     * @return \obiba\mica\DatasetVariableAggregationDto
     */
    public function getAll(){
      return $this->_get(3);
    }
    
    /**
     * Set <all> value
     *
     * @param \obiba\mica\DatasetVariableAggregationDto $value
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function setAll(\obiba\mica\DatasetVariableAggregationDto $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <privacyThreshold> has a value
     *
     * @return boolean
     */
    public function hasPrivacyThreshold(){
      return $this->_has(4);
    }
    
    /**
     * Clear <privacyThreshold> value
     *
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function clearPrivacyThreshold(){
      return $this->_clear(4);
    }
    
    /**
     * Get <privacyThreshold> value
     *
     * @return int
     */
    public function getPrivacyThreshold(){
      return $this->_get(4);
    }
    
    /**
     * Set <privacyThreshold> value
     *
     * @param int $value
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function setPrivacyThreshold( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableContingenciesDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetVariableContingencyDto[]  */
    public $contingencies = array();
    
    /**  @var \obiba\mica\DatasetVariableContingencyDto */
    public $all = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableContingenciesDto');

      // REPEATED MESSAGE contingencies = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "contingencies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableContingencyDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE all = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "all";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\DatasetVariableContingencyDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <contingencies> has a value
     *
     * @return boolean
     */
    public function hasContingencies(){
      return $this->_has(1);
    }
    
    /**
     * Clear <contingencies> value
     *
     * @return \obiba\mica\DatasetVariableContingenciesDto
     */
    public function clearContingencies(){
      return $this->_clear(1);
    }
    
    /**
     * Get <contingencies> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function getContingencies($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <contingencies> value
     *
     * @param \obiba\mica\DatasetVariableContingencyDto $value
     * @return \obiba\mica\DatasetVariableContingenciesDto
     */
    public function setContingencies(\obiba\mica\DatasetVariableContingencyDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <contingencies>
     *
     * @return \obiba\mica\DatasetVariableContingencyDto[]
     */
    public function getContingenciesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <contingencies>
     *
     * @param \obiba\mica\DatasetVariableContingencyDto $value
     * @return \obiba\mica\DatasetVariableContingenciesDto
     */
    public function addContingencies(\obiba\mica\DatasetVariableContingencyDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <all> has a value
     *
     * @return boolean
     */
    public function hasAll(){
      return $this->_has(2);
    }
    
    /**
     * Clear <all> value
     *
     * @return \obiba\mica\DatasetVariableContingenciesDto
     */
    public function clearAll(){
      return $this->_clear(2);
    }
    
    /**
     * Get <all> value
     *
     * @return \obiba\mica\DatasetVariableContingencyDto
     */
    public function getAll(){
      return $this->_get(2);
    }
    
    /**
     * Set <all> value
     *
     * @param \obiba\mica\DatasetVariableContingencyDto $value
     * @return \obiba\mica\DatasetVariableContingenciesDto
     */
    public function setAll(\obiba\mica\DatasetVariableContingencyDto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class CommentDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $message = null;
    
    /**  @var string */
    public $resourceId = null;
    
    /**  @var string */
    public $instanceId = null;
    
    /**  @var string */
    public $createdBy = null;
    
    /**  @var string */
    public $modifiedBy = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var string[]  */
    public $actions = array();
    
    /**  @var \obiba\mica\UserProfileDto */
    public $createdByProfile = null;
    
    /**  @var \obiba\mica\UserProfileDto */
    public $modifiedByProfile = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.CommentDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING message = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING resourceId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "resourceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING instanceId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "instanceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING createdBy = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "createdBy";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING modifiedBy = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "modifiedBy";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED MESSAGE timestamps = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED STRING actions = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "actions";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE createdByProfile = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "createdByProfile";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\UserProfileDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE modifiedByProfile = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "modifiedByProfile";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\UserProfileDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\CommentDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <message> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearMessage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(3);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \obiba\mica\CommentDto
     */
    public function setMessage( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <resourceId> has a value
     *
     * @return boolean
     */
    public function hasResourceId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <resourceId> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearResourceId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <resourceId> value
     *
     * @return string
     */
    public function getResourceId(){
      return $this->_get(4);
    }
    
    /**
     * Set <resourceId> value
     *
     * @param string $value
     * @return \obiba\mica\CommentDto
     */
    public function setResourceId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <instanceId> has a value
     *
     * @return boolean
     */
    public function hasInstanceId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <instanceId> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearInstanceId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <instanceId> value
     *
     * @return string
     */
    public function getInstanceId(){
      return $this->_get(5);
    }
    
    /**
     * Set <instanceId> value
     *
     * @param string $value
     * @return \obiba\mica\CommentDto
     */
    public function setInstanceId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <createdBy> has a value
     *
     * @return boolean
     */
    public function hasCreatedBy(){
      return $this->_has(6);
    }
    
    /**
     * Clear <createdBy> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearCreatedBy(){
      return $this->_clear(6);
    }
    
    /**
     * Get <createdBy> value
     *
     * @return string
     */
    public function getCreatedBy(){
      return $this->_get(6);
    }
    
    /**
     * Set <createdBy> value
     *
     * @param string $value
     * @return \obiba\mica\CommentDto
     */
    public function setCreatedBy( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <modifiedBy> has a value
     *
     * @return boolean
     */
    public function hasModifiedBy(){
      return $this->_has(7);
    }
    
    /**
     * Clear <modifiedBy> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearModifiedBy(){
      return $this->_clear(7);
    }
    
    /**
     * Get <modifiedBy> value
     *
     * @return string
     */
    public function getModifiedBy(){
      return $this->_get(7);
    }
    
    /**
     * Set <modifiedBy> value
     *
     * @param string $value
     * @return \obiba\mica\CommentDto
     */
    public function setModifiedBy( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(8);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearTimestamps(){
      return $this->_clear(8);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(8);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\CommentDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <actions> has a value
     *
     * @return boolean
     */
    public function hasActions(){
      return $this->_has(9);
    }
    
    /**
     * Clear <actions> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearActions(){
      return $this->_clear(9);
    }
    
    /**
     * Get <actions> value
     *
     * @param int $idx
     * @return string
     */
    public function getActions($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <actions> value
     *
     * @param string $value
     * @return \obiba\mica\CommentDto
     */
    public function setActions( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <actions>
     *
     * @return string[]
     */
    public function getActionsList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <actions>
     *
     * @param string $value
     * @return \obiba\mica\CommentDto
     */
    public function addActions( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <createdByProfile> has a value
     *
     * @return boolean
     */
    public function hasCreatedByProfile(){
      return $this->_has(10);
    }
    
    /**
     * Clear <createdByProfile> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearCreatedByProfile(){
      return $this->_clear(10);
    }
    
    /**
     * Get <createdByProfile> value
     *
     * @return \obiba\mica\UserProfileDto
     */
    public function getCreatedByProfile(){
      return $this->_get(10);
    }
    
    /**
     * Set <createdByProfile> value
     *
     * @param \obiba\mica\UserProfileDto $value
     * @return \obiba\mica\CommentDto
     */
    public function setCreatedByProfile(\obiba\mica\UserProfileDto $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <modifiedByProfile> has a value
     *
     * @return boolean
     */
    public function hasModifiedByProfile(){
      return $this->_has(11);
    }
    
    /**
     * Clear <modifiedByProfile> value
     *
     * @return \obiba\mica\CommentDto
     */
    public function clearModifiedByProfile(){
      return $this->_clear(11);
    }
    
    /**
     * Get <modifiedByProfile> value
     *
     * @return \obiba\mica\UserProfileDto
     */
    public function getModifiedByProfile(){
      return $this->_get(11);
    }
    
    /**
     * Set <modifiedByProfile> value
     *
     * @param \obiba\mica\UserProfileDto $value
     * @return \obiba\mica\CommentDto
     */
    public function setModifiedByProfile(\obiba\mica\UserProfileDto $value){
      return $this->_set(11, $value);
    }
  }
}

namespace obiba\mica\DataAccessRequestDto {

  class StatusChangeDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $from = null;
    
    /**  @var string */
    public $to = null;
    
    /**  @var string */
    public $author = null;
    
    /**  @var string */
    public $changedOn = null;
    
    /**  @var \obiba\mica\UserProfileDto */
    public $profile = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DataAccessRequestDto.StatusChangeDto');

      // REQUIRED STRING from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING to = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "to";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING author = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "author";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING changedOn = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "changedOn";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE profile = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "profile";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\UserProfileDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(1);
    }
    
    /**
     * Clear <from> value
     *
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function clearFrom(){
      return $this->_clear(1);
    }
    
    /**
     * Get <from> value
     *
     * @return string
     */
    public function getFrom(){
      return $this->_get(1);
    }
    
    /**
     * Set <from> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function setFrom( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <to> has a value
     *
     * @return boolean
     */
    public function hasTo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <to> value
     *
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function clearTo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <to> value
     *
     * @return string
     */
    public function getTo(){
      return $this->_get(2);
    }
    
    /**
     * Set <to> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function setTo( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <author> has a value
     *
     * @return boolean
     */
    public function hasAuthor(){
      return $this->_has(3);
    }
    
    /**
     * Clear <author> value
     *
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function clearAuthor(){
      return $this->_clear(3);
    }
    
    /**
     * Get <author> value
     *
     * @return string
     */
    public function getAuthor(){
      return $this->_get(3);
    }
    
    /**
     * Set <author> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function setAuthor( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <changedOn> has a value
     *
     * @return boolean
     */
    public function hasChangedOn(){
      return $this->_has(4);
    }
    
    /**
     * Clear <changedOn> value
     *
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function clearChangedOn(){
      return $this->_clear(4);
    }
    
    /**
     * Get <changedOn> value
     *
     * @return string
     */
    public function getChangedOn(){
      return $this->_get(4);
    }
    
    /**
     * Set <changedOn> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function setChangedOn( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <profile> has a value
     *
     * @return boolean
     */
    public function hasProfile(){
      return $this->_has(5);
    }
    
    /**
     * Clear <profile> value
     *
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function clearProfile(){
      return $this->_clear(5);
    }
    
    /**
     * Get <profile> value
     *
     * @return \obiba\mica\UserProfileDto
     */
    public function getProfile(){
      return $this->_get(5);
    }
    
    /**
     * Set <profile> value
     *
     * @param \obiba\mica\UserProfileDto $value
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function setProfile(\obiba\mica\UserProfileDto $value){
      return $this->_set(5, $value);
    }
  }
}

namespace obiba\mica {

  class DataAccessRequestDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var string */
    public $applicant = null;
    
    /**  @var string */
    public $status = "OPENED";
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $attachments = array();
    
    /**  @var string[]  */
    public $actions = array();
    
    /**  @var string[]  */
    public $nextStatus = array();
    
    /**  @var \obiba\mica\DataAccessRequestDto\StatusChangeDto[]  */
    public $statusChangeHistory = array();
    
    /**  @var \obiba\mica\UserProfileDto */
    public $profile = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DataAccessRequestDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REQUIRED STRING applicant = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "applicant";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING status = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = "OPENED";
      $descriptor->addField($f);

      // OPTIONAL STRING title = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE attachments = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "attachments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED STRING actions = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "actions";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING nextStatus = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "nextStatus";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE statusChangeHistory = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "statusChangeHistory";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DataAccessRequestDto\StatusChangeDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE profile = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "profile";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\UserProfileDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearTimestamps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <applicant> has a value
     *
     * @return boolean
     */
    public function hasApplicant(){
      return $this->_has(3);
    }
    
    /**
     * Clear <applicant> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearApplicant(){
      return $this->_clear(3);
    }
    
    /**
     * Get <applicant> value
     *
     * @return string
     */
    public function getApplicant(){
      return $this->_get(3);
    }
    
    /**
     * Set <applicant> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setApplicant( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(4);
    }
    
    /**
     * Clear <status> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearStatus(){
      return $this->_clear(4);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(4);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setStatus( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(5);
    }
    
    /**
     * Clear <title> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearTitle(){
      return $this->_clear(5);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(5);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setTitle( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(6);
    }
    
    /**
     * Clear <content> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearContent(){
      return $this->_clear(6);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(6);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setContent( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <attachments> has a value
     *
     * @return boolean
     */
    public function hasAttachments(){
      return $this->_has(7);
    }
    
    /**
     * Clear <attachments> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearAttachments(){
      return $this->_clear(7);
    }
    
    /**
     * Get <attachments> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachments($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <attachments> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setAttachments(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <attachments>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getAttachmentsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <attachments>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function addAttachments(\obiba\mica\AttachmentDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <actions> has a value
     *
     * @return boolean
     */
    public function hasActions(){
      return $this->_has(8);
    }
    
    /**
     * Clear <actions> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearActions(){
      return $this->_clear(8);
    }
    
    /**
     * Get <actions> value
     *
     * @param int $idx
     * @return string
     */
    public function getActions($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <actions> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setActions( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <actions>
     *
     * @return string[]
     */
    public function getActionsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <actions>
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function addActions( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <nextStatus> has a value
     *
     * @return boolean
     */
    public function hasNextStatus(){
      return $this->_has(9);
    }
    
    /**
     * Clear <nextStatus> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearNextStatus(){
      return $this->_clear(9);
    }
    
    /**
     * Get <nextStatus> value
     *
     * @param int $idx
     * @return string
     */
    public function getNextStatus($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <nextStatus> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setNextStatus( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <nextStatus>
     *
     * @return string[]
     */
    public function getNextStatusList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <nextStatus>
     *
     * @param string $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function addNextStatus( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <statusChangeHistory> has a value
     *
     * @return boolean
     */
    public function hasStatusChangeHistory(){
      return $this->_has(10);
    }
    
    /**
     * Clear <statusChangeHistory> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearStatusChangeHistory(){
      return $this->_clear(10);
    }
    
    /**
     * Get <statusChangeHistory> value
     *
     * @param int $idx
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto
     */
    public function getStatusChangeHistory($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <statusChangeHistory> value
     *
     * @param \obiba\mica\DataAccessRequestDto\StatusChangeDto $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setStatusChangeHistory(\obiba\mica\DataAccessRequestDto\StatusChangeDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <statusChangeHistory>
     *
     * @return \obiba\mica\DataAccessRequestDto\StatusChangeDto[]
     */
    public function getStatusChangeHistoryList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <statusChangeHistory>
     *
     * @param \obiba\mica\DataAccessRequestDto\StatusChangeDto $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function addStatusChangeHistory(\obiba\mica\DataAccessRequestDto\StatusChangeDto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <profile> has a value
     *
     * @return boolean
     */
    public function hasProfile(){
      return $this->_has(11);
    }
    
    /**
     * Clear <profile> value
     *
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function clearProfile(){
      return $this->_clear(11);
    }
    
    /**
     * Get <profile> value
     *
     * @return \obiba\mica\UserProfileDto
     */
    public function getProfile(){
      return $this->_get(11);
    }
    
    /**
     * Set <profile> value
     *
     * @param \obiba\mica\UserProfileDto $value
     * @return \obiba\mica\DataAccessRequestDto
     */
    public function setProfile(\obiba\mica\UserProfileDto $value){
      return $this->_set(11, $value);
    }
  }
}

namespace obiba\mica\DataAccessFormDto {

  class LocalizedPropertyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $value = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DataAccessFormDto.LocalizedPropertyDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\DataAccessFormDto\LocalizedPropertyDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto\LocalizedPropertyDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \obiba\mica\DataAccessFormDto\LocalizedPropertyDto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getValue($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <value> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DataAccessFormDto\LocalizedPropertyDto
     */
    public function setValue(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <value>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getValueList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <value>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\DataAccessFormDto\LocalizedPropertyDto
     */
    public function addValue(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class DataAccessFormDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $schema = null;
    
    /**  @var string */
    public $definition = null;
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $pdfTemplates = array();
    
    /**  @var \obiba\mica\DataAccessFormDto\LocalizedPropertyDto[]  */
    public $properties = array();
    
    /**  @var string */
    public $titleFieldPath = null;
    
    /**  @var string */
    public $idPrefix = null;
    
    /**  @var int */
    public $idLength = null;
    
    /**  @var boolean */
    public $notifySubmitted = null;
    
    /**  @var boolean */
    public $notifyReviewed = null;
    
    /**  @var boolean */
    public $notifyApproved = null;
    
    /**  @var boolean */
    public $notifyRejected = null;
    
    /**  @var boolean */
    public $notifyReopened = null;
    
    /**  @var boolean */
    public $notifyCommented = null;
    
    /**  @var boolean */
    public $withReview = null;
    
    /**  @var boolean */
    public $approvedFinal = null;
    
    /**  @var boolean */
    public $rejectedFinal = null;
    
    /**  @var string */
    public $submittedSubject = null;
    
    /**  @var string */
    public $reviewedSubject = null;
    
    /**  @var string */
    public $approvedSubject = null;
    
    /**  @var string */
    public $rejectedSubject = null;
    
    /**  @var string */
    public $reopenedSubject = null;
    
    /**  @var string */
    public $commentedSubject = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DataAccessFormDto');

      // REQUIRED STRING schema = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "schema";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING definition = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "definition";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE pdfTemplates = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pdfTemplates";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE properties = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "properties";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DataAccessFormDto\LocalizedPropertyDto';
      $descriptor->addField($f);

      // OPTIONAL STRING titleFieldPath = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "titleFieldPath";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING idPrefix = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "idPrefix";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 idLength = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "idLength";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL notifySubmitted = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "notifySubmitted";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL notifyReviewed = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "notifyReviewed";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL notifyApproved = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "notifyApproved";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL notifyRejected = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "notifyRejected";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL notifyReopened = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "notifyReopened";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL notifyCommented = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "notifyCommented";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL withReview = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "withReview";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL approvedFinal = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "approvedFinal";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL rejectedFinal = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "rejectedFinal";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING submittedSubject = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "submittedSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING reviewedSubject = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "reviewedSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING approvedSubject = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "approvedSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING rejectedSubject = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "rejectedSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING reopenedSubject = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "reopenedSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING commentedSubject = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "commentedSubject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <schema> has a value
     *
     * @return boolean
     */
    public function hasSchema(){
      return $this->_has(1);
    }
    
    /**
     * Clear <schema> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearSchema(){
      return $this->_clear(1);
    }
    
    /**
     * Get <schema> value
     *
     * @return string
     */
    public function getSchema(){
      return $this->_get(1);
    }
    
    /**
     * Set <schema> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setSchema( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <definition> has a value
     *
     * @return boolean
     */
    public function hasDefinition(){
      return $this->_has(2);
    }
    
    /**
     * Clear <definition> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearDefinition(){
      return $this->_clear(2);
    }
    
    /**
     * Get <definition> value
     *
     * @return string
     */
    public function getDefinition(){
      return $this->_get(2);
    }
    
    /**
     * Set <definition> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setDefinition( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pdfTemplates> has a value
     *
     * @return boolean
     */
    public function hasPdfTemplates(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pdfTemplates> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearPdfTemplates(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pdfTemplates> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getPdfTemplates($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <pdfTemplates> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setPdfTemplates(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <pdfTemplates>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getPdfTemplatesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <pdfTemplates>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function addPdfTemplates(\obiba\mica\AttachmentDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <properties> has a value
     *
     * @return boolean
     */
    public function hasProperties(){
      return $this->_has(4);
    }
    
    /**
     * Clear <properties> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearProperties(){
      return $this->_clear(4);
    }
    
    /**
     * Get <properties> value
     *
     * @param int $idx
     * @return \obiba\mica\DataAccessFormDto\LocalizedPropertyDto
     */
    public function getProperties($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <properties> value
     *
     * @param \obiba\mica\DataAccessFormDto\LocalizedPropertyDto $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setProperties(\obiba\mica\DataAccessFormDto\LocalizedPropertyDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <properties>
     *
     * @return \obiba\mica\DataAccessFormDto\LocalizedPropertyDto[]
     */
    public function getPropertiesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <properties>
     *
     * @param \obiba\mica\DataAccessFormDto\LocalizedPropertyDto $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function addProperties(\obiba\mica\DataAccessFormDto\LocalizedPropertyDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <titleFieldPath> has a value
     *
     * @return boolean
     */
    public function hasTitleFieldPath(){
      return $this->_has(5);
    }
    
    /**
     * Clear <titleFieldPath> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearTitleFieldPath(){
      return $this->_clear(5);
    }
    
    /**
     * Get <titleFieldPath> value
     *
     * @return string
     */
    public function getTitleFieldPath(){
      return $this->_get(5);
    }
    
    /**
     * Set <titleFieldPath> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setTitleFieldPath( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <idPrefix> has a value
     *
     * @return boolean
     */
    public function hasIdPrefix(){
      return $this->_has(6);
    }
    
    /**
     * Clear <idPrefix> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearIdPrefix(){
      return $this->_clear(6);
    }
    
    /**
     * Get <idPrefix> value
     *
     * @return string
     */
    public function getIdPrefix(){
      return $this->_get(6);
    }
    
    /**
     * Set <idPrefix> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setIdPrefix( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <idLength> has a value
     *
     * @return boolean
     */
    public function hasIdLength(){
      return $this->_has(7);
    }
    
    /**
     * Clear <idLength> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearIdLength(){
      return $this->_clear(7);
    }
    
    /**
     * Get <idLength> value
     *
     * @return int
     */
    public function getIdLength(){
      return $this->_get(7);
    }
    
    /**
     * Set <idLength> value
     *
     * @param int $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setIdLength( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <notifySubmitted> has a value
     *
     * @return boolean
     */
    public function hasNotifySubmitted(){
      return $this->_has(8);
    }
    
    /**
     * Clear <notifySubmitted> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearNotifySubmitted(){
      return $this->_clear(8);
    }
    
    /**
     * Get <notifySubmitted> value
     *
     * @return boolean
     */
    public function getNotifySubmitted(){
      return $this->_get(8);
    }
    
    /**
     * Set <notifySubmitted> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setNotifySubmitted( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <notifyReviewed> has a value
     *
     * @return boolean
     */
    public function hasNotifyReviewed(){
      return $this->_has(9);
    }
    
    /**
     * Clear <notifyReviewed> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearNotifyReviewed(){
      return $this->_clear(9);
    }
    
    /**
     * Get <notifyReviewed> value
     *
     * @return boolean
     */
    public function getNotifyReviewed(){
      return $this->_get(9);
    }
    
    /**
     * Set <notifyReviewed> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setNotifyReviewed( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <notifyApproved> has a value
     *
     * @return boolean
     */
    public function hasNotifyApproved(){
      return $this->_has(10);
    }
    
    /**
     * Clear <notifyApproved> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearNotifyApproved(){
      return $this->_clear(10);
    }
    
    /**
     * Get <notifyApproved> value
     *
     * @return boolean
     */
    public function getNotifyApproved(){
      return $this->_get(10);
    }
    
    /**
     * Set <notifyApproved> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setNotifyApproved( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <notifyRejected> has a value
     *
     * @return boolean
     */
    public function hasNotifyRejected(){
      return $this->_has(11);
    }
    
    /**
     * Clear <notifyRejected> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearNotifyRejected(){
      return $this->_clear(11);
    }
    
    /**
     * Get <notifyRejected> value
     *
     * @return boolean
     */
    public function getNotifyRejected(){
      return $this->_get(11);
    }
    
    /**
     * Set <notifyRejected> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setNotifyRejected( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <notifyReopened> has a value
     *
     * @return boolean
     */
    public function hasNotifyReopened(){
      return $this->_has(12);
    }
    
    /**
     * Clear <notifyReopened> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearNotifyReopened(){
      return $this->_clear(12);
    }
    
    /**
     * Get <notifyReopened> value
     *
     * @return boolean
     */
    public function getNotifyReopened(){
      return $this->_get(12);
    }
    
    /**
     * Set <notifyReopened> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setNotifyReopened( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <notifyCommented> has a value
     *
     * @return boolean
     */
    public function hasNotifyCommented(){
      return $this->_has(13);
    }
    
    /**
     * Clear <notifyCommented> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearNotifyCommented(){
      return $this->_clear(13);
    }
    
    /**
     * Get <notifyCommented> value
     *
     * @return boolean
     */
    public function getNotifyCommented(){
      return $this->_get(13);
    }
    
    /**
     * Set <notifyCommented> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setNotifyCommented( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <withReview> has a value
     *
     * @return boolean
     */
    public function hasWithReview(){
      return $this->_has(14);
    }
    
    /**
     * Clear <withReview> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearWithReview(){
      return $this->_clear(14);
    }
    
    /**
     * Get <withReview> value
     *
     * @return boolean
     */
    public function getWithReview(){
      return $this->_get(14);
    }
    
    /**
     * Set <withReview> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setWithReview( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <approvedFinal> has a value
     *
     * @return boolean
     */
    public function hasApprovedFinal(){
      return $this->_has(15);
    }
    
    /**
     * Clear <approvedFinal> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearApprovedFinal(){
      return $this->_clear(15);
    }
    
    /**
     * Get <approvedFinal> value
     *
     * @return boolean
     */
    public function getApprovedFinal(){
      return $this->_get(15);
    }
    
    /**
     * Set <approvedFinal> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setApprovedFinal( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <rejectedFinal> has a value
     *
     * @return boolean
     */
    public function hasRejectedFinal(){
      return $this->_has(16);
    }
    
    /**
     * Clear <rejectedFinal> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearRejectedFinal(){
      return $this->_clear(16);
    }
    
    /**
     * Get <rejectedFinal> value
     *
     * @return boolean
     */
    public function getRejectedFinal(){
      return $this->_get(16);
    }
    
    /**
     * Set <rejectedFinal> value
     *
     * @param boolean $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setRejectedFinal( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <submittedSubject> has a value
     *
     * @return boolean
     */
    public function hasSubmittedSubject(){
      return $this->_has(17);
    }
    
    /**
     * Clear <submittedSubject> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearSubmittedSubject(){
      return $this->_clear(17);
    }
    
    /**
     * Get <submittedSubject> value
     *
     * @return string
     */
    public function getSubmittedSubject(){
      return $this->_get(17);
    }
    
    /**
     * Set <submittedSubject> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setSubmittedSubject( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <reviewedSubject> has a value
     *
     * @return boolean
     */
    public function hasReviewedSubject(){
      return $this->_has(18);
    }
    
    /**
     * Clear <reviewedSubject> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearReviewedSubject(){
      return $this->_clear(18);
    }
    
    /**
     * Get <reviewedSubject> value
     *
     * @return string
     */
    public function getReviewedSubject(){
      return $this->_get(18);
    }
    
    /**
     * Set <reviewedSubject> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setReviewedSubject( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <approvedSubject> has a value
     *
     * @return boolean
     */
    public function hasApprovedSubject(){
      return $this->_has(19);
    }
    
    /**
     * Clear <approvedSubject> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearApprovedSubject(){
      return $this->_clear(19);
    }
    
    /**
     * Get <approvedSubject> value
     *
     * @return string
     */
    public function getApprovedSubject(){
      return $this->_get(19);
    }
    
    /**
     * Set <approvedSubject> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setApprovedSubject( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <rejectedSubject> has a value
     *
     * @return boolean
     */
    public function hasRejectedSubject(){
      return $this->_has(20);
    }
    
    /**
     * Clear <rejectedSubject> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearRejectedSubject(){
      return $this->_clear(20);
    }
    
    /**
     * Get <rejectedSubject> value
     *
     * @return string
     */
    public function getRejectedSubject(){
      return $this->_get(20);
    }
    
    /**
     * Set <rejectedSubject> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setRejectedSubject( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <reopenedSubject> has a value
     *
     * @return boolean
     */
    public function hasReopenedSubject(){
      return $this->_has(21);
    }
    
    /**
     * Clear <reopenedSubject> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearReopenedSubject(){
      return $this->_clear(21);
    }
    
    /**
     * Get <reopenedSubject> value
     *
     * @return string
     */
    public function getReopenedSubject(){
      return $this->_get(21);
    }
    
    /**
     * Set <reopenedSubject> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setReopenedSubject( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <commentedSubject> has a value
     *
     * @return boolean
     */
    public function hasCommentedSubject(){
      return $this->_has(22);
    }
    
    /**
     * Clear <commentedSubject> value
     *
     * @return \obiba\mica\DataAccessFormDto
     */
    public function clearCommentedSubject(){
      return $this->_clear(22);
    }
    
    /**
     * Get <commentedSubject> value
     *
     * @return string
     */
    public function getCommentedSubject(){
      return $this->_get(22);
    }
    
    /**
     * Set <commentedSubject> value
     *
     * @param string $value
     * @return \obiba\mica\DataAccessFormDto
     */
    public function setCommentedSubject( $value){
      return $this->_set(22, $value);
    }
  }
}

namespace obiba\mica\UserProfileDto {

  class AttributeDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.UserProfileDto.AttributeDto');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \obiba\mica\UserProfileDto\AttributeDto
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \obiba\mica\UserProfileDto\AttributeDto
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \obiba\mica\UserProfileDto\AttributeDto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \obiba\mica\UserProfileDto\AttributeDto
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class UserProfileDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $username = null;
    
    /**  @var string[]  */
    public $groups = array();
    
    /**  @var \obiba\mica\UserProfileDto\AttributeDto[]  */
    public $attributes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.UserProfileDto');

      // REQUIRED STRING username = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING groups = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "groups";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\UserProfileDto\AttributeDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(1);
    }
    
    /**
     * Clear <username> value
     *
     * @return \obiba\mica\UserProfileDto
     */
    public function clearUsername(){
      return $this->_clear(1);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(1);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \obiba\mica\UserProfileDto
     */
    public function setUsername( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <groups> has a value
     *
     * @return boolean
     */
    public function hasGroups(){
      return $this->_has(2);
    }
    
    /**
     * Clear <groups> value
     *
     * @return \obiba\mica\UserProfileDto
     */
    public function clearGroups(){
      return $this->_clear(2);
    }
    
    /**
     * Get <groups> value
     *
     * @param int $idx
     * @return string
     */
    public function getGroups($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <groups> value
     *
     * @param string $value
     * @return \obiba\mica\UserProfileDto
     */
    public function setGroups( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <groups>
     *
     * @return string[]
     */
    public function getGroupsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <groups>
     *
     * @param string $value
     * @return \obiba\mica\UserProfileDto
     */
    public function addGroups( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \obiba\mica\UserProfileDto
     */
    public function clearAttributes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \obiba\mica\UserProfileDto\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \obiba\mica\UserProfileDto\AttributeDto $value
     * @return \obiba\mica\UserProfileDto
     */
    public function setAttributes(\obiba\mica\UserProfileDto\AttributeDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \obiba\mica\UserProfileDto\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \obiba\mica\UserProfileDto\AttributeDto $value
     * @return \obiba\mica\UserProfileDto
     */
    public function addAttributes(\obiba\mica\UserProfileDto\AttributeDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class GitCommitInfoDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $author = null;
    
    /**  @var string */
    public $date = null;
    
    /**  @var string */
    public $comment = null;
    
    /**  @var string */
    public $commitId = null;
    
    /**  @var string[]  */
    public $diffEntries = array();
    
    /**  @var string */
    public $blob = null;
    
    /**  @var boolean */
    public $isHead = false;
    
    /**  @var boolean */
    public $isCurrent = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.GitCommitInfoDto');

      // REQUIRED STRING author = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "author";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING date = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "date";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING comment = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "comment";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING commitId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "commitId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING diffEntries = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "diffEntries";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING blob = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "blob";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isHead = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "isHead";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL isCurrent = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "isCurrent";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <author> has a value
     *
     * @return boolean
     */
    public function hasAuthor(){
      return $this->_has(1);
    }
    
    /**
     * Clear <author> value
     *
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function clearAuthor(){
      return $this->_clear(1);
    }
    
    /**
     * Get <author> value
     *
     * @return string
     */
    public function getAuthor(){
      return $this->_get(1);
    }
    
    /**
     * Set <author> value
     *
     * @param string $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function setAuthor( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <date> has a value
     *
     * @return boolean
     */
    public function hasDate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <date> value
     *
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function clearDate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <date> value
     *
     * @return string
     */
    public function getDate(){
      return $this->_get(2);
    }
    
    /**
     * Set <date> value
     *
     * @param string $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function setDate( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(3);
    }
    
    /**
     * Clear <comment> value
     *
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function clearComment(){
      return $this->_clear(3);
    }
    
    /**
     * Get <comment> value
     *
     * @return string
     */
    public function getComment(){
      return $this->_get(3);
    }
    
    /**
     * Set <comment> value
     *
     * @param string $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function setComment( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <commitId> has a value
     *
     * @return boolean
     */
    public function hasCommitId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <commitId> value
     *
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function clearCommitId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <commitId> value
     *
     * @return string
     */
    public function getCommitId(){
      return $this->_get(4);
    }
    
    /**
     * Set <commitId> value
     *
     * @param string $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function setCommitId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <diffEntries> has a value
     *
     * @return boolean
     */
    public function hasDiffEntries(){
      return $this->_has(5);
    }
    
    /**
     * Clear <diffEntries> value
     *
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function clearDiffEntries(){
      return $this->_clear(5);
    }
    
    /**
     * Get <diffEntries> value
     *
     * @param int $idx
     * @return string
     */
    public function getDiffEntries($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <diffEntries> value
     *
     * @param string $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function setDiffEntries( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <diffEntries>
     *
     * @return string[]
     */
    public function getDiffEntriesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <diffEntries>
     *
     * @param string $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function addDiffEntries( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <blob> has a value
     *
     * @return boolean
     */
    public function hasBlob(){
      return $this->_has(6);
    }
    
    /**
     * Clear <blob> value
     *
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function clearBlob(){
      return $this->_clear(6);
    }
    
    /**
     * Get <blob> value
     *
     * @return string
     */
    public function getBlob(){
      return $this->_get(6);
    }
    
    /**
     * Set <blob> value
     *
     * @param string $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function setBlob( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <isHead> has a value
     *
     * @return boolean
     */
    public function hasIsHead(){
      return $this->_has(7);
    }
    
    /**
     * Clear <isHead> value
     *
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function clearIsHead(){
      return $this->_clear(7);
    }
    
    /**
     * Get <isHead> value
     *
     * @return boolean
     */
    public function getIsHead(){
      return $this->_get(7);
    }
    
    /**
     * Set <isHead> value
     *
     * @param boolean $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function setIsHead( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <isCurrent> has a value
     *
     * @return boolean
     */
    public function hasIsCurrent(){
      return $this->_has(8);
    }
    
    /**
     * Clear <isCurrent> value
     *
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function clearIsCurrent(){
      return $this->_clear(8);
    }
    
    /**
     * Get <isCurrent> value
     *
     * @return boolean
     */
    public function getIsCurrent(){
      return $this->_get(8);
    }
    
    /**
     * Set <isCurrent> value
     *
     * @param boolean $value
     * @return \obiba\mica\GitCommitInfoDto
     */
    public function setIsCurrent( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace obiba\mica {

  class FileDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var int - \obiba\mica\FileType */
    public $type = null;
    
    /**  @var \obiba\mica\FileDto[]  */
    public $children = array();
    
    /**  @var int */
    public $size = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\AttachmentStateDto */
    public $state = null;
    
    /**  @var \obiba\mica\AttachmentDto */
    public $attachment = null;
    
    /**  @var string */
    public $revisionStatus = null;
    
    /**  @var \obiba\mica\PermissionsDto */
    public $permissions = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.FileDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\FileType';
      $descriptor->addField($f);

      // REPEATED MESSAGE children = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "children";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\FileDto';
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE state = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AttachmentStateDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE attachment = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "attachment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // OPTIONAL STRING revisionStatus = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "revisionStatus";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE permissions = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "permissions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\PermissionsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\FileDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <path> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearPath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(2);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \obiba\mica\FileDto
     */
    public function setPath( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \obiba\mica\FileType
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \obiba\mica\FileType $value
     * @return \obiba\mica\FileDto
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <children> has a value
     *
     * @return boolean
     */
    public function hasChildren(){
      return $this->_has(4);
    }
    
    /**
     * Clear <children> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearChildren(){
      return $this->_clear(4);
    }
    
    /**
     * Get <children> value
     *
     * @param int $idx
     * @return \obiba\mica\FileDto
     */
    public function getChildren($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <children> value
     *
     * @param \obiba\mica\FileDto $value
     * @return \obiba\mica\FileDto
     */
    public function setChildren(\obiba\mica\FileDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <children>
     *
     * @return \obiba\mica\FileDto[]
     */
    public function getChildrenList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <children>
     *
     * @param \obiba\mica\FileDto $value
     * @return \obiba\mica\FileDto
     */
    public function addChildren(\obiba\mica\FileDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(5);
    }
    
    /**
     * Clear <size> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearSize(){
      return $this->_clear(5);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(5);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \obiba\mica\FileDto
     */
    public function setSize( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(6);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearTimestamps(){
      return $this->_clear(6);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(6);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\FileDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(7);
    }
    
    /**
     * Clear <state> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearState(){
      return $this->_clear(7);
    }
    
    /**
     * Get <state> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function getState(){
      return $this->_get(7);
    }
    
    /**
     * Set <state> value
     *
     * @param \obiba\mica\AttachmentStateDto $value
     * @return \obiba\mica\FileDto
     */
    public function setState(\obiba\mica\AttachmentStateDto $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <attachment> has a value
     *
     * @return boolean
     */
    public function hasAttachment(){
      return $this->_has(8);
    }
    
    /**
     * Clear <attachment> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearAttachment(){
      return $this->_clear(8);
    }
    
    /**
     * Get <attachment> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachment(){
      return $this->_get(8);
    }
    
    /**
     * Set <attachment> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\FileDto
     */
    public function setAttachment(\obiba\mica\AttachmentDto $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <revisionStatus> has a value
     *
     * @return boolean
     */
    public function hasRevisionStatus(){
      return $this->_has(9);
    }
    
    /**
     * Clear <revisionStatus> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearRevisionStatus(){
      return $this->_clear(9);
    }
    
    /**
     * Get <revisionStatus> value
     *
     * @return string
     */
    public function getRevisionStatus(){
      return $this->_get(9);
    }
    
    /**
     * Set <revisionStatus> value
     *
     * @param string $value
     * @return \obiba\mica\FileDto
     */
    public function setRevisionStatus( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <permissions> has a value
     *
     * @return boolean
     */
    public function hasPermissions(){
      return $this->_has(10);
    }
    
    /**
     * Clear <permissions> value
     *
     * @return \obiba\mica\FileDto
     */
    public function clearPermissions(){
      return $this->_clear(10);
    }
    
    /**
     * Get <permissions> value
     *
     * @return \obiba\mica\PermissionsDto
     */
    public function getPermissions(){
      return $this->_get(10);
    }
    
    /**
     * Set <permissions> value
     *
     * @param \obiba\mica\PermissionsDto $value
     * @return \obiba\mica\FileDto
     */
    public function setPermissions(\obiba\mica\PermissionsDto $value){
      return $this->_set(10, $value);
    }
  }
}

namespace obiba\mica {

  class AttachmentStateDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\AttachmentDto */
    public $attachment = null;
    
    /**  @var string */
    public $publishedId = null;
    
    /**  @var string */
    public $publicationDate = null;
    
    /**  @var string */
    public $publishedBy = null;
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $revisions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AttachmentStateDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING path = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE attachment = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "attachment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // OPTIONAL STRING publishedId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "publishedId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING publicationDate = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "publicationDate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING publishedBy = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "publishedBy";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE revisions = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "revisions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(3);
    }
    
    /**
     * Clear <path> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearPath(){
      return $this->_clear(3);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(3);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setPath( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(4);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearTimestamps(){
      return $this->_clear(4);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(4);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <attachment> has a value
     *
     * @return boolean
     */
    public function hasAttachment(){
      return $this->_has(5);
    }
    
    /**
     * Clear <attachment> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearAttachment(){
      return $this->_clear(5);
    }
    
    /**
     * Get <attachment> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachment(){
      return $this->_get(5);
    }
    
    /**
     * Set <attachment> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setAttachment(\obiba\mica\AttachmentDto $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <publishedId> has a value
     *
     * @return boolean
     */
    public function hasPublishedId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <publishedId> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearPublishedId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <publishedId> value
     *
     * @return string
     */
    public function getPublishedId(){
      return $this->_get(6);
    }
    
    /**
     * Set <publishedId> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setPublishedId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <publicationDate> has a value
     *
     * @return boolean
     */
    public function hasPublicationDate(){
      return $this->_has(7);
    }
    
    /**
     * Clear <publicationDate> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearPublicationDate(){
      return $this->_clear(7);
    }
    
    /**
     * Get <publicationDate> value
     *
     * @return string
     */
    public function getPublicationDate(){
      return $this->_get(7);
    }
    
    /**
     * Set <publicationDate> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setPublicationDate( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <publishedBy> has a value
     *
     * @return boolean
     */
    public function hasPublishedBy(){
      return $this->_has(8);
    }
    
    /**
     * Clear <publishedBy> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearPublishedBy(){
      return $this->_clear(8);
    }
    
    /**
     * Get <publishedBy> value
     *
     * @return string
     */
    public function getPublishedBy(){
      return $this->_get(8);
    }
    
    /**
     * Set <publishedBy> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setPublishedBy( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <revisions> has a value
     *
     * @return boolean
     */
    public function hasRevisions(){
      return $this->_has(9);
    }
    
    /**
     * Clear <revisions> value
     *
     * @return \obiba\mica\AttachmentStateDto
     */
    public function clearRevisions(){
      return $this->_clear(9);
    }
    
    /**
     * Get <revisions> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getRevisions($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <revisions> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function setRevisions(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <revisions>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getRevisionsList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <revisions>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\AttachmentStateDto
     */
    public function addRevisions(\obiba\mica\AttachmentDto $value){
     return $this->_add(9, $value);
    }
  }
}

namespace {
  \obiba\mica\NetworkDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.EntityStateDto.state = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "obiba.mica.EntityStateDto.state";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\EntityStateDto';
    return $f;
  });
  \obiba\mica\DatasetDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.EntityStateDto.datasetState = 1002
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1002;
    $f->name      = "obiba.mica.EntityStateDto.datasetState";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\EntityStateDto';
    return $f;
  });
  \obiba\mica\DatasetDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.StudyDatasetDto.type = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "obiba.mica.StudyDatasetDto.type";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\StudyDatasetDto';
    return $f;
  });
  \obiba\mica\DatasetDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.HarmonizationDatasetDto.type = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "obiba.mica.HarmonizationDatasetDto.type";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\HarmonizationDatasetDto';
    return $f;
  });
  \obiba\mica\StudySummaryDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.StudyStateDto.state = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "obiba.mica.StudyStateDto.state";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\StudyStateDto';
    return $f;
  });
  \obiba\mica\DocumentDigestDto::extension(function(){
      // OPTIONAL MESSAGE obiba.mica.NetworkDigestDto.studies = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "obiba.mica.NetworkDigestDto.studies";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\NetworkDigestDto';
    return $f;
  });
}